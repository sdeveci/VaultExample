<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VaultSharp</name>
    </assembly>
    <members>
        <member name="T:VaultSharp.Core.IntegerToStringJsonConverter">
            <summary>
            System.Text.Json cannot handle int to string automatically.
            This converter helps.
            </summary>
        </member>
        <member name="T:VaultSharp.Core.VaultApiException">
            <summary>
            The vault client exception
            </summary>
        </member>
        <member name="P:VaultSharp.Core.VaultApiException.StatusCode">
            <summary>
            The status code returned by Api.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.VaultApiException.HttpStatusCode">
            <summary>
            The http status code returned by Api.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.VaultApiException.ApiErrors">
            <summary>
            The list of api errors.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.VaultApiException.ApiWarnings">
            <summary>
            The list of api warnings.
            </summary>
        </member>
        <member name="M:VaultSharp.Core.VaultApiException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:VaultSharp.Core.VaultApiException.#ctor(System.String)">
            <summary>
            Message constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:VaultSharp.Core.VaultApiException.#ctor(System.String,System.Exception)">
            <summary>
            Message constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:VaultSharp.Core.VaultApiException.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Status code based exception.
            </summary>
            <param name="httpStatusCode">Http status code.</param>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:VaultSharp.Core.BackendConfig">
            <summary>
            Represents the configuration values for a backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.DefaultLeaseTtl">
            <summary>
            Gets or sets the default lease TTL.
            A value of "0" means that the system defaults are used by this backend.
            </summary>
            <value>
            The default lease TTL.
            </value>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.ForceNoCache">
            <summary>
            Gets or sets the cache flag.
            </summary>
            <value>
            The cache flag.
            </value>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.MaximumLeaseTtl">
            <summary>
            Gets or sets the maximum lease TTL.
            A value of "0" means that the system defaults are used by this backend.
            </summary>
            <value>
            The maximum lease TTL.
            </value>
        </member>
        <member name="T:VaultSharp.Core.BackendListingVisibility">
            <summary>
            Represents the BackendListingVisibility
            </summary>
        </member>
        <member name="T:VaultSharp.Core.NewBackendConfig">
            <summary>
            Represents the configuration values for a backend.
            </summary>
        </member>
        <member name="T:VaultSharp.IVaultClient">
            <summary>
            Provides an interface to interact with Vault as a client.
            This is the only entry point for consuming the Vault Client.
            </summary>
        </member>
        <member name="P:VaultSharp.IVaultClient.Settings">
            <summary>
            Gets the Vault Client Settings.
            </summary>
        </member>
        <member name="P:VaultSharp.IVaultClient.V1">
            <summary>
            Gets the V1 Client interface for Vault Api.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AbstractAuthMethodInfo">
            <summary>
            Abstract class. You don't say.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo">
            <summary>
            Represents the login information for the AliCloud Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.Base64EncodedIdentityRequestUrl">
            <summary>
            [required]
            Gets the Base64-encoded HTTP URL used in the signed request.
            </summary>
            <value>
            The base 64 encoded url.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.Base64EncodedIdentityRequestHeaders">
            <summary>
            [required]
            Gets the Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of 
            string values (though the length of that array will probably only be one).
            </summary>
            <value>
            The base 64 encoded headers.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="base64EncodedIdentityRequestUrl">
            [required]
            The Base64-encoded HTTP URL used in the signed request.
            </param>
            <param name="base64EncodedIdentityRequestHeaders">
            [required]
            The Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of 
            string values (though the length of that array will probably only be one).
            </param>       
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="base64EncodedIdentityRequestUrl">
            [required]
            The Base64-encoded HTTP URL used in the signed request.
            </param>
            <param name="base64EncodedIdentityRequestHeaders">
            [required]
            The Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of 
            string values (though the length of that array will probably only be one).
            </param>  
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodProvider">
            <summary>
            Non login operations.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AliCloud.IAliCloudAuthMethod">
            <summary>
            Non login operations.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AliCloud.IAliCloudAuthMethod.WriteRoleAsync(System.String,VaultSharp.V1.AuthMethods.AliCloud.Models.CreateAliCloudRoleModel,System.String)">
            <summary>
            Registers a role. 
            Only entities using the role registered using this endpoint will 
            be able to perform the login operation.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create. </param>
            <param name="createAliCloudRoleModel"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AliCloud" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AliCloud.IAliCloudAuthMethod.ReadRoleAsync(System.String,System.String)">
            <summary>
            Returns the previously registered role configuration.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AliCloud" />
            Provide a value only if you have customized the mount point.
            </param>        
            <returns>The role details</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AliCloud.IAliCloudAuthMethod.ReadAllRolesAsync(System.String)">
            <summary>
            This endpoint returns a list of available roles. 
            Only the role names are returned, not any values.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AliCloud" />
            Provide a value only if you have customized the mount point.
            </param>  
            <returns>The role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AliCloud.IAliCloudAuthMethod.DeleteRoleAsync(System.String,System.String)">
            <summary>
            Deletes the previously registered role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AliCloud" />
            Provide a value only if you have customized the mount point.
            </param>        
            <returns>The task</returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo">
            <summary>
            Represents the login information for the AppRole Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.RoleId">
            <summary>
            Gets the role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </summary>
            <value>
            The role identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.SecretId">
            <summary>
            Gets the secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </summary>
            <value>
            The secret identifier.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo"/> class.
            </summary>
            <param name="roleId">
            The role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </param>
            <param name="secretId">
            The secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleId">
            The role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </param>
            <param name="secretId">
            The secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod">
            <summary>
            Non login operations.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadAllRolesAsync(System.String)">
            <summary>
            This endpoint returns a list of available roles. 
            Only the role names are returned, not any values.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.
            </param>  
            <returns>The role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleAsync(System.String,VaultSharp.V1.AuthMethods.AppRole.Models.AppRoleRoleModel,System.String)">
            <summary>
            Creates a new AppRole or updates an existing AppRole. 
            This endpoint supports both create and update capabilities. 
            There can be one or more constraints enabled on the role. 
            It is required to have at least one of them enabled while creating or updating a role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create. </param>
            <param name="appRoleRoleModel"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRoleAsync(System.String,System.String)">
            <summary>
            Reads the properties of an existing AppRole.
            </summary>
            <param name="roleName">Name of the Role.</param>
            <param name="mountPoint">Mount point of the AppRole Auth method</param>
            <returns>Metadata of Named AppRole</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRoleAsync(System.String,System.String)">
            <summary>
            Deletes an existing AppRole from the method.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.
            </param>        
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.GetRoleIdAsync(System.String,System.String)">
            <summary>
            Reads the RoleID of an existing AppRole.
            </summary>
            <param name="roleName">Name of the Role.</param>
            <param name="mountPoint">Mount point of the AppRole Auth method</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleIdAsync(System.String,VaultSharp.V1.AuthMethods.AppRole.Models.RoleIdInfo,System.String)">
            <summary>
            Updates the RoleID of an existing AppRole to a custom value.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create. </param>
            <param name="roleIdInfo"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.PullNewSecretIdAsync(System.String,VaultSharp.V1.AuthMethods.AppRole.Models.PullSecretIdRequestOptions,System.String)">
            <summary>
            Generates and issues a new SecretID on an existing AppRole. 
            Similar to tokens, the response will also contain a 
            secret_id_accessor value which can be used to read the properties 
            of the SecretID without divulging the SecretID itself, and also to 
            delete the SecretID from the AppRole.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="secretIdRequestOptions"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The secret id info</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadAllSecretIdAccessorsAsync(System.String,System.String)">
            <summary>
            Lists the accessors of all the SecretIDs issued against the AppRole. 
            This includes the accessors for "custom" SecretIDs as well.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>The secret accessors.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadSecretIdInfoAsync(System.String,System.String,System.String)">
            <summary>
            Reads out the properties of a SecretID.
            </summary>
            <param name="roleName">Name of the Role.</param>
            <param name="secretId">The secret id.</param>
            <param name="mountPoint">Mount point of the AppRole Auth method</param>
            <returns>Secret Id properties</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DestroySecretIdAsync(System.String,System.String,System.String)">
            <summary>
            Destroy an AppRole secret ID.
            </summary>
            <param name="roleName">Name of the Role.</param>
            <param name="secretId">The secret id.</param>
            <param name="mountPoint">Mount point of the AppRole Auth method</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadSecretIdInfoByAccessorAsync(System.String,System.String,System.String)">
            <summary>
            Reads out the properties of a SecretID by accessor.
            </summary>
            <param name="roleName">Name of the Role.</param>
            <param name="secretIdAccessor">The secret id accessor.</param>
            <param name="mountPoint">Mount point of the AppRole Auth method</param>
            <returns>Secret Id properties</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DestroySecretIdByAccessorAsync(System.String,System.String,System.String)">
            <summary>
            Destroy an AppRole secret id by Accessor.
            </summary>
            <param name="roleName">Name of the Role.</param>
            <param name="secretIdAccessor">The secret id accessor.</param>
            <param name="mountPoint">Mount point of the AppRole Auth method</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.PushNewSecretIdAsync(System.String,VaultSharp.V1.AuthMethods.AppRole.Models.PushSecretIdRequestOptions,System.String)">
            <summary>
            Assigns a "custom" SecretID against an existing AppRole. 
            This is used in the "Push" model of operation.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="secretIdRequestOptions"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The secret id info</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRolePoliciesAsync(System.String,System.String)">
            <summary>
            Gets the policies attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The policy value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRolePoliciesAsync(System.String,VaultSharp.V1.AuthMethods.AppRole.Models.AppRolePoliciesModel,System.String)">
            <summary>
            Updates the policy attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="policies">The policy to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRolePoliciesAsync(System.String,System.String)">
            <summary>
            Deletes the policy attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRoleSecretIdNumberOfUsesAsync(System.String,System.String)">
            <summary>
            Gets the secret-id-num-uses attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The policy value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleSecretIdNumberOfUsesAsync(System.String,System.Int64,System.String)">
            <summary>
            Updates the secret-id-num-uses attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="secretIdNumberOfUses">The policy to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRoleSecretIdNumberOfUsesAsync(System.String,System.String)">
            <summary>
            Deletes the secret-id-num-uses attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRoleSecretIdTimeToLiveAsync(System.String,System.String)">
            <summary>
            Gets the secret-id-ttl attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The secret-id-ttl value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleSecretIdTimeToLiveAsync(System.String,System.Int64,System.String)">
            <summary>
            Updates the secret-id-ttl attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="secretIdTimeToLive">The secret-id-ttl to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRoleSecretIdTimeToLiveAsync(System.String,System.String)">
            <summary>
            Deletes the secret-id-ttl attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRoleTokenTimeToLiveAsync(System.String,System.String)">
            <summary>
            Gets the token-ttl attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The token-ttl value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleTokenTimeToLiveAsync(System.String,System.Int64,System.String)">
            <summary>
            Updates the token-ttl attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="tokenTimeToLive">The token-ttl to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRoleTokenTimeToLiveAsync(System.String,System.String)">
            <summary>
            Deletes the token-ttl attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRoleTokenMaximumTimeToLiveAsync(System.String,System.String)">
            <summary>
            Gets the token-max-ttl attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The token-max-ttl value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleTokenMaximumTimeToLiveAsync(System.String,System.Int64,System.String)">
            <summary>
            Updates the token-max-ttl attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="tokenMaximumTimeToLive">The token-max-ttl to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRoleTokenMaximumTimeToLiveAsync(System.String,System.String)">
            <summary>
            Deletes the token-max-ttl attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRoleBindSecretIdAsync(System.String,System.String)">
            <summary>
            Gets the bind-secret-id attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The bind-secret-id value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleBindSecretIdAsync(System.String,System.Boolean,System.String)">
            <summary>
            Updates the bind-secret-id attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="bindSecretId">The bind-secret-id to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRoleBindSecretIdAsync(System.String,System.String)">
            <summary>
            Deletes the bind-secret-id attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRoleSecretIdBoundCIDRsAsync(System.String,System.String)">
            <summary>
            Gets the secret-id-bound-cidrs attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The secret-id-bound-cidrs value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleSecretIdBoundCIDRsAsync(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Updates the secret-id-bound-cidrs attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="secretIdBoundCIDRs">The secret-id-bound-cidrs to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRoleSecretIdBoundCIDRsAsync(System.String,System.String)">
            <summary>
            Deletes the secret-id-bound-cidrs attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRoleTokenBoundCIDRsAsync(System.String,System.String)">
            <summary>
            Gets the token-bound-cidrs attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The token-bound-cidrs value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRoleTokenBoundCIDRsAsync(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Updates the token-bound-cidrs attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="tokenBoundCIDRs">The token-bound-cidrs to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRoleTokenBoundCIDRsAsync(System.String,System.String)">
            <summary>
            Deletes the token-bound-cidrs attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.ReadRolePeriodAsync(System.String,System.String)">
            <summary>
            Gets the period attribute of the Role entity.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The period value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.WriteRolePeriodAsync(System.String,System.Int64,System.String)">
            <summary>
            Updates the period attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="period">The period to write.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.DeleteRolePeriodAsync(System.String,System.String)">
            <summary>
            Deletes the period attribute of the Role entity
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.TidyTokensAsync(System.String)">
            <summary>
            Performs some maintenance tasks to clean up invalid entries that may remain in the token store.
            Generally, running this is not needed unless upgrade notes or support personnel suggest it. 
            This may perform a lot of I/O to the storage method so should be used sparingly.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Auth backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.AppRole" />
            Provide a value only if you have customized the mount point.</param> 
            <returns>The secret with warning message.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod.LoginAsync(VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo)">
            <summary>
            Useful to generate the login token as an explicit api.
            Unauthenticated API.
            </summary>
            <param name="appRoleAuthMethodInfo">The request object</param>
            <returns>The secret with the login token</returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AppRole.Models.PullSecretIdRequestOptions">
            <summary>
            https://developer.hashicorp.com/vault/api-docs/auth/approle#generate-new-secret-id
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.Models.PullSecretIdRequestOptions.Metadata">
            <summary>
            Metadata to be tied to the SecretID. 
            This should be a JSON-formatted string containing the metadata in 
            key-value pairs. This metadata will be set on tokens issued with 
            this SecretID, and is logged in audit logs in plaintext.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.Models.PullSecretIdRequestOptions.CIDRList">
            <summary>
            Comma separated string or list of CIDR blocks enforcing secret IDs 
            to be used from specific set of IP addresses. If 
            secret_id_bound_cidrs is set on the role, then the list of CIDR 
            blocks listed here should be a subset of the CIDR blocks listed on
            the role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.Models.PullSecretIdRequestOptions.TokenBoundCIDRs">
            <summary>
            Comma-separated string or list of CIDR blocks; if set, specifies 
            blocks of IP addresses which can use the auth tokens generated by 
            this SecretID. Overrides any role-set value but must be a subset.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.Models.PullSecretIdRequestOptions.NumberOfUses">
            <summary>
            Number of times this SecretID can be used, after which the SecretID
            expires. A value of zero will allow unlimited uses. Overrides 
            secret_id_num_uses role option when supplied. May not be higher 
            than role's secret_id_num_uses.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.Models.PullSecretIdRequestOptions.TimeToLive">
            <summary>
            Duration in seconds (3600) or an integer time unit (60m) after 
            which this SecretID expires. A value of zero will allow the 
            SecretID to not expire. Overrides secret_id_ttl role option when 
            supplied. May not be longer than role's secret_id_ttl.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.Models.PushSecretIdRequestOptions.SecretId">
            <summary>
            SecretID to be attached to the Role.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AppRole.Models.RoleIdInfo">
            <summary>
            https://developer.hashicorp.com/vault/api-docs/auth/approle#read-approle-role-id
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AppRole.Models.SecretIdInfo">
            <summary>
            https://developer.hashicorp.com/vault/api-docs/auth/approle#generate-new-secret-id
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AuthMethod">
            <summary>
            Represents an auth method.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethod.Type">
            <summary>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AuthMethodType">
            <summary>
            A helper class for retrieving and comparing Authentication Backend types.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.AliCloud">
            <summary>
            Gets the ali cloud.
            </summary>
            <value>
            The ali cloud.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.AppRole">
            <summary>
            Gets the application role.
            </summary>
            <value>
            The application role.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.AWS">
            <summary>
            Gets the aws type.
            </summary>
            <value>
            The aws type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Azure">
            <summary>
            Gets the aws type.
            </summary>
            <value>
            The aws type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.GitHub">
            <summary>
            Gets the git hub type.
            </summary>
            <value>
            The git hub.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.GoogleCloud">
            <summary>
            Gets the GoogleCloud type.
            </summary>
            <value>
            The GoogleCloud.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.JWT">
            <summary>
            Gets the JWT type.
            </summary>
            <value>
            The JWT.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Kubernetes">
            <summary>
            Gets the Kubernetes type.
            </summary>
            <value>
            The Kubernetes.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.LDAP">
            <summary>
            Gets the LDAP type.
            </summary>
            <value>
            The LDAP.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Kerberos">
            <summary>
            Gets the Kerberos type.
            </summary>
            <value>
            The Kerberos.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.OCI">
            <summary>
            Gets the OCI type.
            </summary>
            <value>
            The Okta.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Okta">
            <summary>
            Gets the Okta type.
            </summary>
            <value>
            The Okta.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.RADIUS">
            <summary>
            Gets the RADIUS type.
            </summary>
            <value>
            The RADIUS.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Cert">
            <summary>
            Gets the certificate type.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Token">
            <summary>
            Gets the token type.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.UserPass">
            <summary>
            Gets the generic type.
            </summary>
            <value>
            The generic.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.CloudFoundry">
            <summary>
            Gets the Cloud Foundry type.
            </summary>
            <value>
            The Cloud Foundry.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Type">
            <summary>
            Gets the type type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AuthMethodType" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.op_Equality(VaultSharp.V1.AuthMethods.AuthMethodType,VaultSharp.V1.AuthMethods.AuthMethodType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.op_Inequality(VaultSharp.V1.AuthMethods.AuthMethodType,VaultSharp.V1.AuthMethods.AuthMethodType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.Equals(VaultSharp.V1.AuthMethods.AuthMethodType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AuthMethodTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.AuthMethods.AuthMethodType" /> object to and from JSON.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo">
            <summary>
            Represents the login information for the AWS Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.AWSAuthMethodType">
            <summary>
            Gets the AWS Auth method type.
            </summary>
            <value>
            The AWS auth type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.RoleName">
            <summary>
            Gets the name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.Nonce">
            <summary>
            Gets the nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-accesslist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo"/> class.
            </summary>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-accesslist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">
            <para>[required]</para>
            The mount point.</param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-accesslist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodType">
            <summary>
            Represents the AWS Auth types.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodType.EC2">
            <summary>
            EC2 based auth.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodType.IAM">
            <summary>
            IAM based Auth.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo">
            <summary>
            Represents the login information for the EC2 AWS Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.AWSAuthMethodType">
            <summary>
            Gets the AWS Auth method type.
            </summary>
            <value>
            The AWS auth type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.Identity">
            <summary>
            Gets the Base64 encoded EC2 instance identity document. 
            This needs to be supplied along with the signature parameter.
            </summary>
            <value>
            The Base64 encoded EC2 instance identity document signature.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.Signature">
            <summary>
            Gets the Base64 encoded SHA256 RSA signature of the instance identity document. 
            This needs to be supplied along with identity parameter when using the ec2 auth method.
            </summary>
            <value>
            The Identity signature.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.PKCS7">
            <summary>
            Gets the PKCS7 signature of the identity document with all \n characters removed.
            Either this needs to be set OR both identity and signature need to be set when using the ec2 auth method.
            </summary>
            <value>
            The PKCS7 signature.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo"/> class.
            </summary>
            <param name = "pkcs7" >
            <para>[required/optional]</para>
            The PKCS7 signature of the identity document with all \n characters removed.
            Either this needs to be set OR both identity and signature need to be set when using the ec2 auth method.
            </param>
            <param name = "identity" >
            <para>[required/optional]</para>
            The Base64 encoded EC2 instance identity document. 
            This needs to be supplied along with the signature parameter.
            </param>
            <param name = "signature" >
            <para>[required/optional]</para>
            The Base64 encoded SHA256 RSA signature of the instance identity document. 
            This needs to be supplied along with identity parameter when using the ec2 auth method.
            </param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-accesslist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name = "pkcs7" >
            <para>[required/optional]</para>
            The PKCS7 signature of the identity document with all \n characters removed.
            Either this needs to be set OR both identity and signature need to be set when using the ec2 auth method.
            </param>
            <param name = "identity" >
            <para>[required/optional]</para>
            The Base64 encoded EC2 instance identity document. 
            This needs to be supplied along with the signature parameter.
            </param>
            <param name = "signature" >
            <para>[required/optional]</para>
            The Base64 encoded SHA256 RSA signature of the instance identity document. 
            This needs to be supplied along with identity parameter when using the ec2 auth method.
            </param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-accesslist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo">
            <summary>
            Represents the login information for the IAM AWS Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.AWSAuthMethodType">
            <summary>
            Gets the AWS Auth method type.
            </summary>
            <value>
            The AWS auth type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.HttpRequestMethod">
            <summary>
            Gets the HTTP method used in the signed request. 
            Currently only POST is supported, but other methods may be supported in the future. 
            This is required when using the iam auth method.
            </summary>
            <value>
            The HTTP method used in the signed request.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.RequestUrl">
            <summary>
            Gets the Base64-encoded HTTP URL used in the signed request. 
            Most likely just aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8= (base64-encoding of https://sts.amazonaws.com/) as most 
            requests will probably use POST with an empty URI.
            This is required when using the iam auth method.
            </summary>
            <value>
            The Request Url used in the signed request.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.RequestBody">
            <summary>
            Gets the Base64-encoded HTTP body used in the signed request. 
            Most likely QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNQ== which is the base64 encoding of 
            <![CDATA[ Action=GetCallerIdentity&Version=2011-06-15 ]]>
            This is required when using the iam auth method.
            </summary>
            <value>
            The Request Url used in the signed request.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.RequestHeaders">
            <summary>
            Gets the Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of string 
            values (though the length of that array will probably only be one). 
            If the iam_server_id_header_value is configured in Vault for the aws auth mount, 
            then the headers must include the X-Vault-AWS-IAM-Server-ID header, 
            its value must match the value configured, and the header must be included in the signed headers. 
            This is required when using the iam auth method.
            </summary>
            <value>
            The Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo"/> class.
            </summary>
            <param name="requestHeaders">
            <para>[required]</para>
            The Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of string 
            values (though the length of that array will probably only be one). 
            If the iam_server_id_header_value is configured in Vault for the aws auth mount, 
            then the headers must include the X-Vault-AWS-IAM-Server-ID header, 
            its value must match the value configured, and the header must be included in the signed headers. 
            This is required when using the iam auth method.
            Please see <see href="https://github.com/rajanadar/VaultSharp/blob/master/README.md#aws-auth-method---iam"/> on how to construct this.
            </param>
            <param name="httpRequestMethod">
            <para>[required]</para>
            The HTTP method used in the signed request. 
            Currently only POST is supported, but other methods may be supported in the future. 
            This is required when using the iam auth method.
            </param>
            <param name="requestUrl">
            <para>[required]</para>
            Base64-encoded HTTP URL used in the signed request. 
            Most likely just aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8= (base64-encoding of https://sts.amazonaws.com/) as 
            most requests will probably use POST with an empty URI. 
            This is required when using the iam auth method.
            </param>
            <param name="requestBody">
            <para>[required]</para>
            Base64-encoded body of the signed request. Most likely QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNQ== 
            which is the base64 encoding of <![CDATA[ Action=GetCallerIdentity&Version=2011-06-15 ]]>.
            This is required when using the iam auth method.
            </param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-accesslist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="requestHeaders">
            <para>[required]</para>
            The Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of string 
            values (though the length of that array will probably only be one). 
            If the iam_server_id_header_value is configured in Vault for the aws auth mount, 
            then the headers must include the X-Vault-AWS-IAM-Server-ID header, 
            its value must match the value configured, and the header must be included in the signed headers. 
            This is required when using the iam auth method.
            </param>
            <param name="httpRequestMethod">
            <para>[required]</para>
            The HTTP method used in the signed request. 
            Currently only POST is supported, but other methods may be supported in the future. 
            This is required when using the iam auth method.
            </param>
            <param name="requestUrl">
            <para>[required]</para>
            Base64-encoded HTTP URL used in the signed request. 
            Most likely just aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8= (base64-encoding of https://sts.amazonaws.com/) as 
            most requests will probably use POST with an empty URI. 
            This is required when using the iam auth method.
            </param>
            <param name="requestBody">
            <para>[required]</para>
            Base64-encoded body of the signed request. Most likely QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNQ== 
            which is the base64 encoding of <![CDATA[ Action=GetCallerIdentity&Version=2011-06-15 ]]>.
            This is required when using the iam auth method.
            </param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-accesslist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.IAWSAuthMethod">
            <summary>
            Non login methods
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo">
            <summary>
            Represents the login information for the Azure Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.JWT">
            <summary>
            [required]
            Gets the signed JSON Web Token (JWT) from Azure MSI.
            </summary>
            <value>
            The jwt.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.SubscriptionId">
            <summary>
            [optional]
            Gets the subscription ID for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.ResourceGroupName">
            <summary>
            [optional]
            Gets the resource group for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineName">
            <summary>
            [optional]
            Gets the virtual machine name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata. 
            If <see cref="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineScaleSetName"/> is provided, this value is ignored.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineScaleSetName">
            <summary>
            [optional]
            Gets the virtual machine scale set name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT) from Azure MSI.
            </param>
            <param name="subscriptionId">
            [optional]
            The subscription ID for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
            <param name="resourceGroupName">
            [optional]
            The resource group for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
            <param name="virtualMachineName">
            [optional]
            The virtual machine name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata. 
            If <see cref="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineScaleSetName"/> is provided, this value is ignored.
            </param>
            <param name="virtualMachineScaleSetName">
            [optional]
            The virtual machine scale set name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT) from Azure MSI.
            </param>
            <param name="subscriptionId">
            [optional]
            The subscription ID for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
            <param name="resourceGroupName">
            [optional]
            The resource group for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
            <param name="virtualMachineName">
            [optional]
            The virtual machine name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata. 
            If <see cref="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineScaleSetName"/> is provided, this value is ignored.
            </param>
            <param name="virtualMachineScaleSetName">
            [optional]
            The virtual machine scale set name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Azure.IAzureAuthMethod">
            <summary>
            Non login operations.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo">
            <summary>
            Represents the login information for the Cert Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.ClientCertificate">
            <summary>
            Gets the client certificate.
            </summary>
            <value>
            The client certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.ClientCertificateCollection">
            <summary>
            Gets the collection of client certificates including the chain.
            Use this property if you want to attach the full chain of certs.
            Use either this property or the <see cref="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.ClientCertificate"/> property, not both.
            </summary>
            <value>
            The client certificates.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.RoleName">
            <summary>
            Optionally, you may specify a single certificate role to authenticate against.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo" /> class.
            </summary>
            <param name="clientCertificate">The client certificate.</param>
            <param name="roleName">A single certificate role to authenticate against.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="clientCertificate">The client certificate.</param>
            <param name="roleName">A single certificate role to authenticate against.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo" /> class.
            </summary>
            <param name="clientCertificateCollection">The client certificate including the chain.</param>
            <param name="roleName">A single certificate role to authenticate against.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="clientCertificateCollection">The client certificate including the chain.</param>
            <param name="roleName">A single certificate role to authenticate against.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.AuthMethodType">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.CFInstanceCertContent">
            <summary>
            [required]
            The full body of the file available at the path denoted by CF_INSTANCE_CERT.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.Signature">
            <summary>
            [required]
            The signature.
            Please see https://gist.github.com/rajanadar/84769efeca64e0128d7a8a627b7bb4db
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.SignatureDateTime">
            <summary>
            [required]
            The datetime used in the signature.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="instanceCertContent">[required]
            The full body of the file available at the path denoted by CF_INSTANCE_CERT.
            </param>
            <param name="signatureDateTime">[required]
            The datetime used in the signature.
            </param>
            <param name="signature">[required]
            The signature.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.#ctor(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="instanceCertContent">[required]
            The full body of the file available at the path denoted by CF_INSTANCE_CERT.
            </param>
            <param name="signatureDateTime">[required]
            The datetime used in the signature.
            </param>
            <param name="signature">[required]
            The signature.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo">
            <summary>
            Represents the login information for the Custom Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo.CustomAuthInfoAsyncDelegate">
            <summary>
            Gets the CustomAuthInfo asynchronous delegate which includes the token and token info.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo.#ctor(System.String,System.Func{System.Threading.Tasks.Task{VaultSharp.V1.Commons.AuthInfo}})">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo"/> class.
            </summary>
            <param name="type">The type of the unknown authentication backend type not supported by this library yet. But supported by the Vault Server.</param>
            <param name="customAuthInfoAsyncDelegate">The authentication token asynchronous delegate.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo">
            <summary>
            Represents the login information for the GoogleCloud Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.JWT">
            <summary>
            [required]
            Gets the signed JSON Web Token (JWT).
            For iam type roles, this is a JWT signed with the signJwt method <see href="https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signJwt" /> or a self-signed JWT.
            For gce type roles, this is an identity metadata token. <see href="https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature"/>
            </summary>
            <value>
            The jwt.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT).
            For iam type roles, this is a JWT signed with the signJwt method <see href="https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signJwt" /> or a self-signed JWT.
            For gce type roles, this is an identity metadata token. <see href="https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature"/>
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT).
            For iam type roles, this is a JWT signed with the signJwt method <see href="https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signJwt" /> or a self-signed JWT.
            For gce type roles, this is an identity metadata token. <see href="https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature"/>
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.GoogleCloud.IGoogleCloudAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo">
            <summary>
            Represents the login information for the GitHub Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.PersonalAccessToken">
            <summary>
            Gets the personal access token.
            </summary>
            <value>
            The personal access token.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo"/> class.
            </summary>
            <param name="personalAccessToken">The personal access token.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="personalAccessToken">The personal access token.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.GitHub.IGitHubAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.IAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.AliCloud">
            <summary>
            The AliCloud Auth method.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.AppRole">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.AWS">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Azure">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.CloudFoundry">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.GitHub">
            <summary>
            Hmm.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.GoogleCloud">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Kerberos">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Kubernetes">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.LDAP">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.OCI">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Okta">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.RADIUS">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Cert">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.UserPass">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.IAuthMethod.ResetVaultToken">
            <summary>
            This will make VaultSharp fetch the vault token again before the new operation
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.IAuthMethod.PerformImmediateLogin">
            <summary>
            Performs immediate login to uncover login issues faster.
            Cannot be used for Token Authentication, since you already have a token.
            </summary>
            <returns>Nothing</returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.IAuthMethodInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication method.
            </summary>
            <value>
            The type of the authentication method.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethodInfo.ReturnedLoginAuthInfo">
            <summary>
            Gets the returned Login Auth info from Vault.
            It'll have the vault login token, accessors and any login metadata.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.IAuthMethodLoginProvider">
            <summary>
            Auth Method login provider.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.IAuthMethodLoginProvider.GetVaultTokenAsync">
            <summary>
            The login method for the auth method.
            </summary>
            <returns>The Vault Token.</returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.JWT.IJWTAuthMethod">
            <summary>
            Non Login methods
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.JWT.IJWTAuthMethod.GetOIDCAuthURLAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Obtain an authorization URL from Vault to start an OIDC login flow.
            </summary>
            <param name="redirectUri">
            <para>[required]</para>
            Path to the callback to complete the login. 
            This will be of the form, "https://.../oidc/callback" where the leading portion is dependent on
            your Vault server location, port, and the mount of the JWT plugin. 
            This must be configured with Vault and the provider.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            Name of the role against which the login is being attempted. 
            Defaults to configured default_role if not provided.
            </param>
            <param name="clientNonce">
            <para>[optional]</para>
            Optional client-provided nonce that must match the client_nonce value provided 
            during a subsequent request to the callback API.
            </param>
            <param name="mountPoint">
            Mount point of the JWT Auth method
            </param>
            <returns>The OIDC Auth URL</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.JWT.IJWTAuthMethod.DoOIDCCallbackAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Exchange an authorization code for an OIDC ID Token. 
            The ID token will be further validated against any bound claims, and if valid a Vault token will be returned.
            </summary>
            <param name="state">
            <para>[required]</para>
            Opaque state ID that is part of the Authorization URL and will be included in 
            the the redirect following successful authentication on the provider.
            </param>
            <param name="nonce">
            <para>[required]</para>
            Opaque nonce that is part of the Authorization URL and will be 
            included in the the redirect following successful authentication on the provider.
            </param>
            <param name="code">
            <para>[required]</para>
            Provider-generated authorization code that Vault will exchange for an ID token.
            </param>
            <param name="clientNonce">
            <para>[optional]</para>
            Optional client-provided nonce that must match the client_nonce value 
            provided during the prior request to the auth API.
            </param>
            <param name="mountPoint">
            Mount point of the JWT Auth method
            </param>
            <returns>The OIDC Vault Token</returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo">
            <summary>
            Represents the login information for the JWT Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.JWT">
            <summary>
            [required]
            Gets the signed JSON Web Token (JWT).
            </summary>
            <value>
            The jwt.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT).
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT).
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Kerberos.IKerberosAuthMethod">
            <summary>
            Kerberos Auth method.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo">
            <summary>
            Represents the login information for the Kerberos Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.Credentials">
            <summary>
            Credentials to use for Kerberos authentication.
            </summary>
            <value>
            The credentials.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.PreAuthenticate">
            <summary>
            Flag to indicate if the credentials should be cached.
            Defaults to true.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo"/> class.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.#ctor(System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo"/> class.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.#ctor(System.String,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="credentials">The credential to use.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.#ctor(System.String,System.Net.ICredentials,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="credentials">The credential to use.</param>
            <param name="preAuthenticate">The flag to cache credentials.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Kubernetes.IKubernetesAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo">
            <summary>
            Represents the login information for the Kubernetes Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.JWT">
            <summary>
            [required]
            Gets the signed JSON Web Token (jwt) for authenticating a service account.
            </summary>
            <value>
            The jwt.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (jwt) for authenticating a service account.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (jwt) for authenticating a service account.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod">
            <summary>
            LDAP Auth method.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.WriteGroupAsync(System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            This endpoint creates or updates LDAP group policies.
            </summary>
            <param name="groupName"><para>[required]</para>
            The name of the LDAP group
            </param>
            <param name="policies"><para>[required]</para>
            List of policies associated to the group.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>        
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.ReadGroupAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint reads LDAP group policies.
            </summary>
            <param name="groupName"><para>[required]</para>
            The name of the LDAP group
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The policies.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.ReadAllGroupsAsync(System.String,System.String)">
            <summary>
            This endpoint reads all LDAP groups.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The groups.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.DeleteGroupAsync(System.String,System.String)">
            <summary>
            This endpoint deletes the LDAP group.
            </summary>
            <param name="groupName"><para>[required]</para>
            The name of the LDAP group
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.WriteUserAsync(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            This endpoint creates or updates LDAP users policies and group associations.
            </summary>
            <param name="username"><para>[required]</para>
            The name of the user
            </param>
            <param name="policies"><para>[required]</para>
            List of policies associated to the user.
            </param>
            <param name="groups"><para>[required]</para>
            List of groups associated to the user.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>        
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.ReadUserAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint reads LDAP user.
            </summary>
            <param name="username"><para>[required]</para>
            The name of user
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The user.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.ReadAllUsersAsync(System.String,System.String)">
            <summary>
            This endpoint reads all LDAP users.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The users.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.DeleteUserAsync(System.String,System.String)">
            <summary>
            This endpoint deletes the LDAP user.
            </summary>
            <param name="username"><para>[required]</para>
            The name of the LDAP user
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo">
            <summary>
            Represents the login information for the LDAP Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo">
            <summary>
            Represents the login information for the OCI Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.RoleName">
            <summary>
            Gets the name of the role against which the login is being attempted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.RequestHeaders">
            <summary>
            Gets the request headers.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo"/> class.
            </summary>
            <param name="rolename">The Name of the role against which the login is being attempted..</param>
            <param name="requestHeaders">Signed request headers for authenticating. 
            For details on signing, see https://docs.cloud.oracle.com/iaas/Content/API/Concepts/signingrequests.htm
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="rolename">The Name of the role against which the login is being attempted..</param>
            <param name="requestHeaders">Signed request headers for authenticating. 
            For details on signing, see https://docs.cloud.oracle.com/iaas/Content/API/Concepts/signingrequests.htm
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Okta.IOktaAuthMethod">
            <summary>
            Non login operations.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Okta.IOktaAuthMethod.VerifyPushChallengeAsync(System.String,System.String)">
            <summary>
            Verify a number challenge that may result from an Okta Verify Push challenge.
            </summary>
            <param name="nonce">
            [required]
            Nonce provided if performing login that requires number verification challenge. 
            Logins through the vault login CLI command will automatically generate a nonce.
            </param>
            <param name="mountPoint">Mount point of the Okta Auth method</param>
            <returns>Correct answer</returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo">
            <summary>
            Represents the login information for the Okta Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.TOTP">
            <summary>
            Gets the TOTP.
            </summary>
            <value>
            The TOTP.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.TOTPProvider">
            <summary>
            Gets the Provider.
            </summary>
            <value>
            The Provider.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.Nonce">
            <summary>
            Gets the Nonce.
            </summary>
            <value>
            The Nonce.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.#ctor(System.String,System.String,System.String,System.Nullable{VaultSharp.V1.AuthMethods.Okta.OktaTOTPProvider},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="totp">The totp</param>
            <param name="provider">The provider</param>
            <param name="nonce">The nonce</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.Nullable{VaultSharp.V1.AuthMethods.Okta.OktaTOTPProvider},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="totp">The totp</param>
            <param name="provider">The provider</param>
            <param name="nonce">The nonce</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Okta.OktaTOTPProvider">
            <summary>
            The OktaTOTPProvider
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaVerifyPushChallengeResponse.CorrectAnswer">
            <summary>
            The correct push challenge answer
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo">
            <summary>
            Represents the login information for the RADIUS Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest">
            <summary>
            Token creation options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Id">
            <summary>
            The ID of the client token. 
            Can only be specified by a root token. 
            Otherwise, the token ID is a randomly generated value.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.RoleName">
            <summary>
            The name of the token role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Policies">
            <summary>
            A list of policies for the token. 
            This must be a subset of the policies belonging to the token making the request, unless root. 
            If not specified, defaults to all the policies of the calling token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Metadata">
            <summary>
            A map of string to string valued metadata. 
            This is passed through to the audit devices.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.NoParent">
            <summary>
            When set to true, the token created will not have a parent.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.CreateOrphan">
            <summary>
            When set to true, the token will be created via create-orphan endpoint.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.NoDefaultPolicy">
            <summary>
            If true the default policy will not be contained in this token's policy set.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Renewable">
            <summary>
            Set to false to disable the ability of the token to be renewed past its initial TTL. 
            Setting the value to true will allow the token to be renewable up to the system/mount maximum TTL.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.TimeToLive">
            <summary>
            The TTL period of the token, provided as "1h", where hour is the largest suffix. 
            If not provided, the token is valid for the default lease TTL, or indefinitely if the root policy is used.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.TokenType">
            <summary>
            The token type. Can be "batch" or "service". 
            Defaults to the type specified by the role configuration named by role_name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.ExplicitMaxTimeToLive">
            <summary>
             If set, the token will have an explicit max TTL set upon it. 
             This maximum token TTL cannot be changed later, and unlike with normal tokens, 
             updates to the system/mount max TTL value will have no effect at renewal time -- 
             the token will never be able to be renewed or used past the value set at issue time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.DisplayName">
            <summary>
            The display name of the token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.NumberOfUses">
            <summary>
            The maximum uses for the given token. 
            This can be used to create a one-time-token or limited use token. 
            The value of 0 has no limit to the number of uses.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Period">
            <summary>
            If specified, the token will be periodic; 
            it will have no maximum TTL (unless an "explicit-max-ttl" is also set) 
            but every renewal will use the given period. 
            Requires a root token or one with the sudo capability.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.EntityAlias">
            <summary>
            Name of the entity alias to associate with during token creation. 
            Only works in combination with role_name argument and used entity alias 
            must be listed in allowed_entity_aliases. 
            If this has been specified, the entity will not be inherited from the parent.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest">
            <summary>
            Request object to create a token role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.RoleName">
            <summary>
            Name of the token role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.Orphan">
            <summary>
            If true, tokens created against this policy will be orphan tokens 
            (they will have no parent). As such, they will not be automatically
            revoked by the revocation of any other token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.PathSuffix">
            <summary>
            If set, tokens created against this role will have the given suffix 
            as part of their path in addition to the role name. This can be 
            useful in certain scenarios, such as keeping the same role name in 
            the future but revoking all tokens created against it before some 
            point in time. The suffix can be changed, allowing new callers to have 
            the new suffix as part of their path, and then tokens with the old 
            suffix can be revoked via /sys/leases/revoke-prefix
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.Renewable">
            <summary>
            Set to false to disable the ability of the token to be renewed past
            its initial TTL. Setting the value to true will allow the token to 
            be renewable up to the system/mount maximum TTL.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.TokenExplicitMaxTimeToLive">
            <summary>
            If set, will encode an explicit max TTL onto the token. This is a 
            hard cap even if token_ttl and token_max_ttl would otherwise allow 
            a renewal.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.TokenNoDefaultPolicy">
            <summary>
            If set, the default policy will not be set on generated tokens; 
            otherwise it will be added to the policies set in token_policies.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.TokenPeriod">
            <summary>
            Period if anything is set on the token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.TokenType">
            <summary>
            The type of token to be generated. Can be one of service, batch or
            default. For token store roles, there are two additional 
            possibilities: default-service and default-batch which specify the 
            type to return unless the client requests a different type at 
            generation time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.AllowedEntityAliases">
            <summary>
            String or JSON list of allowed entity aliases. If set, specifies 
            the entity aliases which are allowed to be used during token 
            generation. This field supports globbing. 
            Note that allowed_entity_aliases is not case sensitive.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.AllowedPolcies">
            <summary>
             If set, tokens can be created with any subset of the policies in 
             this list, rather than the normal semantics of tokens being a 
             subset of the calling token's policies. The parameter is a 
             comma-delimited string of policy names. If at creation time 
             no_default_policy is not set and "default" is not contained in 
             disallowed_policies or glob matched in disallowed_policies_glob, 
             the "default" policy will be added to the created token 
             automatically.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.DisallowedPolcies">
            <summary>
            If set, successful token creation via this role will require that 
            no policies in the given list are requested. The parameter is a 
            comma-delimited string of policy names. Adding "default" to this 
            list will prevent "default" from being added automatically to 
            created tokens.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.AllowedPolciesGlob">
            <summary>
            If set, tokens can be created with any subset of glob matched 
            policies in this list, rather than the normal semantics of tokens 
            being a subset of the calling token's policies. The parameter is a 
            comma-delimited string of policy name globs. If at creation time 
            no_default_policy is not set and "default" is not contained in 
            disallowed_policies or glob matched in disallowed_policies_glob, 
            the "default" policy will be added to the created token 
            automatically. 
            If combined with allowed_policies policies need to only match one 
            of the two lists to be permitted. Note that unlike allowed_policies 
            the policies listed in allowed_policies_glob will not be added to 
            the token when no policies are specified in the call to 
            /auth/token/create/:role_name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.DisallowedPolciesGlob">
            <summary>
            If set, successful token creation via this role will require that 
            no requested policies glob match any of policies in this list. 
            The parameter is a comma-delimited string of policy name globs. 
            Adding any glob that matches "default" to this list will prevent 
            "default" from being added automatically to created tokens. If 
            combined with disallowed_policies policies need to only match one 
            of the two lists to be blocked.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.TokenBoundCidrs">
            <summary>
            List of CIDR blocks; if set, specifies blocks of IP addresses which 
            can authenticate successfully, and ties the resulting token to these 
            blocks as well.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest.TokenNumUses">
            <summary>
            The maximum number of times a generated token may be used 
            (within its lifetime); 0 means unlimited. If you require the token 
            to have the ability to create child tokens, you will need to set this 
            value to 0.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod">
            <summary>
            Token Auth Method
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.CreateTokenAsync(VaultSharp.V1.AuthMethods.Token.CreateTokenRequest)">
            <summary>
            Creates a new token. 
            Certain options are only available when called by a root token. 
            If you are creating an orphaned token, a root token is not required to create an orphan token 
            (otherwise set with the no_parent option). 
            If used with a role name, the token will be created against the specified role name; 
            this may override options set during this call.
            </summary>
            <param name="createTokenRequest">The token creation request</param>
            <returns>Auth info</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.LookupAsync(System.String)">
            <summary>
            Gets token information about the specified token.
            </summary>
            <param name="clientToken">The vault token to lookup</param>
            <returns>
            The secret with <see cref="T:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo" />.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.LookupSelfAsync">
            <summary>
            Gets the calling client token information. i.e. the token used by the client as part of this call.
            </summary>
            <returns>
            The secret with <see cref="T:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo" />.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.RenewSelfAsync(System.String)">
            <summary>
            Renews a lease associated with the calling token.
            This is used to prevent the expiration of a token, and the automatic revocation of it.
            Token renewal is possible only if there is a lease associated with it.
            </summary>
            <param name="increment"><para>[optional]</para>
            An optional requested lease increment can be provided. This increment may be ignored.
            </param>
            <returns>
            The auth info.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.RevokeSelfAsync">
            <summary>
            Revokes the calling client token and all child tokens.
            When the token is revoked, all secrets generated with it are also revoked.
            </summary>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.CreateTokenRoleAsync(System.String,VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest)">
            <summary>
            Create a token role.
            </summary>
            <param name="roleName">Name of the Token Role.</param>
            <param name="createTokenRoleRequest">
            Request object containing configurations for the token role.
            </param>
            <returns>No return value.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.ReadTokenRoleAsync(System.String)">
            <summary>
            Returns metadata of a token role.
            </summary>
            <param name="roleName">Token Role to be fetched.</param>
            <returns>Metadata of requested token role.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.ListTokenRolesAsync">
            <summary>
            Lists the available token roles.
            </summary>
            <returns>Keys of available token roles.</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.DeleteTokenRoleAsync(System.String)">
            <summary>
            Delete token role.
            </summary>
            <param name="roleName">Token role to be deleted.</param>
            <returns>No return value.</returns>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.ListTokenRoles.Keys">
            <summary>
            List of available token roles.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo">
            <summary>
            Represents the information associated with the calling token.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.Models.ClientTokenInfo">
            <summary>
            Represents the information associated with the client token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.ClientTokenInfo.Accessor">
            <summary>
            Gets or sets the accessor.
            </summary>
            <value>
            The accessor.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.ClientTokenInfo.ExplicitMaximumTimeToLive">
            <summary>
            Gets or sets the explicit maximum time to live.
            </summary>
            <value>
            The explicit maximum time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.ClientTokenInfo.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo">
            <summary>
            Represents the information associated with a token accessor.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.CreationTimeToLive">
            <summary>
            Gets or sets the creation time to live.
            </summary>
            <value>
            The creation time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.Orphan">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo"/> is orphan.
            </summary>
            <value>
              <c>true</c> if orphan; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.Type">
            <summary>
            Gets or sets the type
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo">
            <summary>
            Represents the information associated with a token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.Id">
            <summary>
            <para>[optional]</para>
            Gets or sets the ID of the client token. Can only be specified by a root token. 
            Otherwise, the token ID is a randomly generated UUID.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.Policies">
            <summary>
            <para>[optional]</para>
            Gets or sets a list of policies for the token. 
            This must be a subset of the policies belonging to the token making the request, unless root. 
            If not specified, defaults to all the policies of the calling token.
            </summary>
            <value>
            The policies.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.Metadata">
            <summary>
            <para>[optional]</para>
            Gets or sets a map of string to string valued metadata. 
            This is passed through to the audit backends.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.CreatedByPath">
            <summary>
            Gets or sets the path used to create the token in the first place.
            </summary>
            <value>
            The created by path.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.DisplayName">
            <summary>
            <para>[optional]</para>
            Gets or sets the display name of the token. 
            Defaults to "token".
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.MaximumUsageCount">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum uses for the given token. 
            This can be used to create a one-time-token or limited use token. 
            Defaults to 0, which has no limit to number of uses.
            </summary>
            <value>
            The maximum usage count.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.LastRenewalTime">
            <summary>
            Gets or sets a value indicating when this token was last renewed.
            </summary>
            <value>
              The epoch of the last renewal time
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.ExpireTime">
            <summary>
            Gets or sets the expire time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.IdentityPolicies">
            <summary>
            <para>[optional]</para>
            Gets or sets a list of identity policies for the token. 
            </summary>
            <value>
            The identity policies.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.IssueTime">
            <summary>
            Gets or sets the issue time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo">
            <summary>
            Configuration of named role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.Name">
            <summary>
            Name of the token role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.Orphan">
            <summary>
            If true, tokens created against this policy will be orphan tokens 
            (they will have no parent). As such, they will not be automatically
            revoked by the revocation of any other token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.PathSuffix">
            <summary>
            If set, tokens created against this role will have the given suffix 
            as part of their path in addition to the role name. This can be 
            useful in certain scenarios, such as keeping the same role name in 
            the future but revoking all tokens created against it before some 
            point in time. The suffix can be changed, allowing new callers to have 
            the new suffix as part of their path, and then tokens with the old 
            suffix can be revoked via /sys/leases/revoke-prefix
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.Renewable">
            <summary>
            Set to false to disable the ability of the token to be renewed past
            its initial TTL. Setting the value to true will allow the token to 
            be renewable up to the system/mount maximum TTL.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.TokenExplicitMaxTimeToLive">
            <summary>
            If set, will encode an explicit max TTL onto the token. This is a 
            hard cap even if token_ttl and token_max_ttl would otherwise allow 
            a renewal.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.TokenNoDefaultPolicy">
            <summary>
            If set, the default policy will not be set on generated tokens; 
            otherwise it will be added to the policies set in token_policies.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.TokenPeriod">
            <summary>
            Period if anything is set on the token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.TokenType">
            <summary>
            The type of token to be generated. Can be one of service, batch or
            default. For token store roles, there are two additional 
            possibilities: default-service and default-batch which specify the 
            type to return unless the client requests a different type at 
            generation time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.ExplicitMaxTimeToLive">
            <summary>
            Explicit Max TTL of the role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.AllowedEntityAliases">
            <summary>
            String or JSON list of allowed entity aliases. If set, specifies 
            the entity aliases which are allowed to be used during token 
            generation. This field supports globbing. 
            Note that allowed_entity_aliases is not case sensitive.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.AllowedPolcies">
            <summary>
             If set, tokens can be created with any subset of the policies in 
             this list, rather than the normal semantics of tokens being a 
             subset of the calling token's policies. The parameter is a 
             comma-delimited string of policy names. If at creation time 
             no_default_policy is not set and "default" is not contained in 
             disallowed_policies or glob matched in disallowed_policies_glob, 
             the "default" policy will be added to the created token 
             automatically.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.DisallowedPolcies">
            <summary>
            If set, successful token creation via this role will require that 
            no policies in the given list are requested. The parameter is a 
            comma-delimited string of policy names. Adding "default" to this 
            list will prevent "default" from being added automatically to 
            created tokens.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.AllowedPolciesGlob">
            <summary>
            If set, tokens can be created with any subset of glob matched 
            policies in this list, rather than the normal semantics of tokens 
            being a subset of the calling token's policies. The parameter is a 
            comma-delimited string of policy name globs. If at creation time 
            no_default_policy is not set and "default" is not contained in 
            disallowed_policies or glob matched in disallowed_policies_glob, 
            the "default" policy will be added to the created token 
            automatically. 
            If combined with allowed_policies policies need to only match one 
            of the two lists to be permitted. Note that unlike allowed_policies 
            the policies listed in allowed_policies_glob will not be added to 
            the token when no policies are specified in the call to 
            /auth/token/create/:role_name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo.DisallowedPolciesGlob">
            <summary>
             If set, successful token creation via this role will require that no requested policies glob match any of policies in this list. The parameter is a comma-delimited string of policy name globs. Adding any glob that matches "default" to this list will prevent "default" from being added automatically to created tokens. If combined with disallowed_policies policies need to only match one of the two lists to be blocked.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo">
            <summary>
            Represents the login information for the Token Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo.VaultToken">
            <summary>
            Gets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo" /> class.
            </summary>
            <param name="vaultToken">The token.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo">
            <summary>
            Represents the login information for the UserPass Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:VaultSharp.V1.Commons.AbstractBackend">
            <summary>
            Represents backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Path">
            <summary>
            Gets or sets the path. If not set, the value will default to the type value.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Accessor">
            <summary>
            Gets or sets the accessor.
            </summary>
            <value>
            The accessor.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Config">
            <summary>
            Gets or sets the config options.
            </summary>
            <value>
            The config options.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Description">
            <summary>
            Gets or sets a human-friendly description of the backend.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Local">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag indicating if this is a local mount.
            </summary>
            <remarks>
            The option is allowed in Vault open-source, but relevant functionality is only supported in Vault Enterprise:
            </remarks>
            <value>
            The flag.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.PluginName">
            <summary>
            Gets or sets the plugin name.
            </summary>
            <value>
            The plugin name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.SealWrap">
            <summary>
            Gets or sets a seal wrap flag for the backend.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.AuthInfo">
            <summary>
            Represents the authorization information in Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.ClientTokenAccessor">
            <summary>
            Gets or sets the client token accessor.
            </summary>
            <value>
            The client token accessor.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.ClientToken">
            <summary>
            Gets or sets the client token.
            </summary>
            <value>
            The client token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.Policies">
            <summary>
            Gets or sets the policies.
            </summary>
            <value>
            The policies.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.Metadata">
            <summary>
            Gets or sets any metadata associated with this authorization info.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.LeaseDurationSeconds">
            <summary>
            Gets or sets the lease duration seconds.
            </summary>
            <value>
            The lease duration seconds.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.Commons.AuthInfo"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.CurrentSecretMetadata">
            <summary>
            Represents the current Secret Metadata.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.CurrentSecretMetadata.CreatedTime">
            <summary>
            Gets or sets the created time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.CurrentSecretMetadata.DeletionTime">
            <summary>
            Gets or sets the deletion time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.CurrentSecretMetadata.Destroyed">
            <summary>
            Gets or sets the destroyed flag.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.CurrentSecretMetadata.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.FullSecretMetadata">
            <summary>
            Represents the full Secret Metadata.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.CASRequired">
            <summary>
            Gets or sets the cas required flag.
            </summary>
            <value>
            If true all keys will require the cas parameter to be set on all write requests.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.CreatedTime">
            <summary>
            Gets or sets the created time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.CurrentVersion">
            <summary>
            Gets or sets the current version.
            </summary>
            <value>
            The current version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.CustomMetadata">
            <summary>
            Gets or sets the custom metadata.
            </summary>
            <value>
            A map of arbitrary string to string valued user-provided metadata meant to describe the secret.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.MaxVersion">
            <summary>
            Gets or sets the max version.
            </summary>
            <value>
            The max version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.OldestVersion">
            <summary>
            Gets or sets the oldest version.
            </summary>
            <value>
            The oldest version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.UpdatedTime">
            <summary>
            Gets or sets the deletion time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.Versions">
            <summary>
            Gets or sets the versions.
            </summary>
            <value>
            The versions.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.ListInfo">
            <summary>
            Represents the list of keys.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.ListInfo.Keys">
            <summary>
            Gets or sets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.VaultApiRequest">
            <summary>
            Represents a Vault Request with no input data.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.Commons.VaultApiRequest`1">
            <summary>
            Represents a generic Vault Request.
            </summary>
            <typeparam name="TRequestData">The type of the data contained in the request.</typeparam>
        </member>
        <member name="P:VaultSharp.V1.Commons.VaultApiRequest`1.RequestData">
            <summary>
            Gets or sets the request data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.VaultApiResponse">
            <summary>
            Represents a Vault Response with no content.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.Commons.VaultApiResponse`1">
            <summary>
            Represents a generic Vault Response.
            </summary>
            <typeparam name="TResponseData">The type of the data contained in the response.</typeparam>
        </member>
        <member name="P:VaultSharp.V1.Commons.VaultApiResponse`1.ResponseData">
            <summary>
            Gets or sets the response data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.Secret`1">
            <summary>
            Represents a Vault SecretsEngine with lease information and generic data.
            </summary>
            <typeparam name="TData">The type of the data contained in the secret.</typeparam>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.RequestId">
            <summary>
            Gets or sets the request identifier.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.LeaseId">
            <summary>
            Gets or sets the lease identifier.
            </summary>
            <value>
            The lease identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.SecretsEngines.SecretsEngine"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.LeaseDurationSeconds">
            <summary>
            Gets or sets the lease duration seconds.
            </summary>
            <value>
            The lease duration seconds.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.WrapInfo">
            <summary>
            Gets or sets the wrapped information.
            </summary>
            <value>
            The wrapped information.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.Warnings">
            <summary>
            Gets or sets the warnings.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.AuthInfo">
            <summary>
            Gets or sets the authorization information.
            </summary>
            <value>
            The authorization information.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.SecretData">
            <summary>
            Represents a Vault Secret Data.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretData`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretData`1.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.SecretMetadata">
            <summary>
            Represents a Vault Secret Metadata.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretMetadata.CreatedTime">
            <summary>
            Gets or sets the created time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretMetadata.DeletionTime">
            <summary>
            Gets or sets the deletion time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretMetadata.Destroyed">
            <summary>
            Gets or sets the destroyed flag.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.WrapInfo">
            <summary>
            Represents the wrapped information in Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.Accessor">
            <summary>
            Gets or sets the wrapped accessor.
            </summary>
            <value>
            The wrapped accessor.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.CreationPath">
            <summary>
            Gets or sets the creation path.
            </summary>
            <value>
            The creation path.
            </value>
        </member>
        <member name="T:VaultSharp.V1.IVaultClientV1">
            <summary>
            The V1 interface for the Vault Api.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.IVaultClientV1.Secrets">
            <summary>
            The Secrets Engine interface.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.IVaultClientV1.Auth">
            <summary>
            The Auth Method interface.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.IVaultClientV1.System">
            <summary>
            The System Backend interface.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials">
            <summary>
            Represents the Active Directory credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials.CurrentPassword">
            <summary>
            Gets or sets the current password.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials.LastPassword">
            <summary>
            Gets or sets the last password.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary">
            <summary>
            Provides Active Directory APIs for Library Management
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary.WriteServiceAccountSetAsync(System.String,VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CreateServiceAccountSetModel,System.String)">
            <summary>
            Writes the sets of service accounts that Vault will offer for check-out.
            When adding a service account to the library, Vault verifies it already exists in Active Directory.
            </summary>
            <param name="setName"><para>[required]</para>
            Name of the set.</param>
            <param name="createServiceAccountSetModel">The request</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary.ReadServiceAccountSetAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries an existing set
            </summary>
            <param name="setName"><para>[required]</para>
            Name of the set.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the  mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary.ReadAllServiceAccountSetsAsync(System.String,System.String)">
            <summary>
            This endpoint lists all existing sets in the secrets engine.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary.DeleteServiceAccountSetAsync(System.String,System.String)">
            <summary>
            Deletes a set
            </summary>
            <param name="setName"><para>[required]</para>
            Name of the set.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary.CheckoutCredentialsAsync(System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Returns a credential if available.
            </summary>
            <param name="setName"><para>[required]</para>
            Name of the service account set.</param>
            <param name="timeToLive">
            The maximum amount of time a check-out lasts before Vault automatically checks it back in. 
            Setting it to zero reflects an unlimited lending period. 
            Defaults to the set's ttl. 
            If the requested ttl is higher than the set's, the set's will be used.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CheckedOutCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary.CheckinCredentialsAsync(System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Checks in a checked out credential.
            By default, check-in must be called by the same entity or client token used for check-out. 
            If a caller attempts to check in a service account they're not authorized to check in, 
            they will receive an error response. If they attempt to check in a service account 
            they are authorized to check in, but it's already checked in, they will receive a 
            successful response but the account will not be included in the check_ins listed. 
            check_ins shows which service accounts were checked in by this particular call.
            </summary>
            <param name="setName"><para>[required]</para>
            Name of the service account set.</param>
            <param name="serviceAccountNames">
            The names of all the service accounts to be checked in. May be omitted if only one is checked out.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CheckedInAccounts" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary.ForceCheckinCredentialsAsync(System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Force checks in a checked out credential.
            Access to this endpoint should only be granted to highly privileged Vault users, 
            like Vault operators.
            If they attempt to check in a service account 
            they are authorized to check in, but it's already checked in, they will receive a 
            successful response but the account will not be included in the check_ins listed. 
            check_ins shows which service accounts were checked in by this particular call.
            </summary>
            <param name="setName"><para>[required]</para>
            Name of the service account set.</param>
            <param name="serviceAccountNames">
            The names of all the service accounts to be checked in. May be omitted if only one is checked out.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CheckedInAccounts" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine">
            <summary>
            The Active Directory Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.ConfigureConnectionAsync(VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CreateConnectionConfigModel,System.String)">
            <summary>
            The config endpoint configures the LDAP connection and binding parameters, 
            as well as the password rotation configuration.
            At present, this endpoint does not confirm that the provided AD credentials are 
            valid AD credentials with proper permissions.
            </summary>
            <param name="createConnectionConfigModel">The request</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.ReadConnectionAsync(System.String,System.String)">
            <summary>
            Reads the LDAP Connection details.
            </summary>       
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The config</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.DeleteConnectionAsync(System.String)">
            <summary>
            Deletes the LDAP Config
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.WriteRoleAsync(System.String,VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CreateActiveDirectoryRoleModel,System.String)">
            <summary>
            Writes a role for Vault to manage the passwords for individual service accounts.
            When adding a role, Vault verifies its associated service account exists.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="createActiveDirectoryRoleModel">The request</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.ReadRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries an existing role by the given name.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the  mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.ReadAllRolesAsync(System.String,System.String)">
            <summary>
            This endpoint lists all existing roles in the secrets engine.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.DeleteRoleAsync(System.String,System.String)">
            <summary>
            Deletes a role
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Offers the credential information for a given role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.RotateRootCredentialsAsync(System.String)">
            <summary>
            Rotate the Bind Password to a new one known only to Vault.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>
            Generally, rotate-root returns a 204. 
            However, if rotate-root is already in progress, it may return a 200 with a 
            warning that root credential rotation is already in progress.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.ReadRotateRootCredentialsStatusAsync(System.String)">
            <summary>
            Read the status of Rotate action.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>
            Generally, returns a 204. 
            However, if rotate-root is already in progress, it may return a 200 with a 
            warning that root credential rotation is already in progress.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.RotateRoleCredentialsAsync(System.String,System.String)">
            <summary>
            Manually rotate the password of a managed Active Directory service account.
            </summary>
            <param name="roleName">
            [required]
            The role of the service account.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <returns>
            Generally, rotate returns a 204. 
            However, if rotate is already in progress, it may return a 200 with a 
            warning that rotation is already in progress.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CheckedOutCredentials">
            <summary>
            Represents the Active Directory checked out credentials.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials">
            <summary>
            Represents the AliCloud credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials.AccessKey">
            <summary>
            Gets or sets the access key.
            </summary>
            <value>
            The access key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>
            The expiration.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials.SecretKey">
            <summary>
            Gets or sets the secret key.
            </summary>
            <value>
            The secret key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials.SecurityToken">
            <summary>
            Gets or sets the STS token.
            </summary>
            <value>
            The secret token.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine">
            <summary>
            The AliCloud Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine.ConfigureRootCredentialsAsync(VaultSharp.V1.SecretsEngines.AliCloud.Models.CreateRootCredentialsConfigModel,System.String)">
            <summary>
            This endpoint configures the root RAM credentials to communicate with AliCloud. 
            To use instance metadata, leave the static credential configuration unset.
            </summary>
            <param name="createRootCredentialsConfigModel">The request</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AliCloud" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine.ReadRootCredentialsConfigAsync(System.String,System.String)">
            <summary>
            Reads the Connection details.
            </summary>       
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AliCloud" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The config</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine.WriteRoleAsync(System.String,VaultSharp.V1.SecretsEngines.AliCloud.Models.CreateAliCloudRoleModel,System.String)">
            <summary>
            The role endpoint configures how Vault will generate credentials for users of each role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="createAliCloudRoleModel">The request</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AliCloud" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine.ReadRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries an existing role by the given name.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AliCloud" />
            Provide a value only if you have customized the  mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine.ReadAllRolesAsync(System.String,System.String)">
            <summary>
            This endpoint lists all existing roles in the secrets engine.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AliCloud" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine.DeleteRoleAsync(System.String,System.String)">
            <summary>
            Deletes a role
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AliCloud" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic AliCloud RAM credential based on the named role.
            </summary>
            <param name="aliCloudRoleName"><para>[required]</para>
            Name of the AliCloud role.</param>
            <param name="aliCloudMountPoint"><para>[optional]</para>
            The mount point for the AliCloud backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AliCloud" />
            Provide a value only if you have customized the AliCloud mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AWS.AbstractAWSRoleModel">
            <summary>
            Abstract Role definition.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials">
            <summary>
            Represents the AWS credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials.AccessKey">
            <summary>
            Gets or sets the access key.
            </summary>
            <value>
            The access key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials.SecretKey">
            <summary>
            Gets or sets the secret key.
            </summary>
            <value>
            The secret key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials.SecurityToken">
            <summary>
            Gets or sets the STS token.
            </summary>
            <value>
            The secret token.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AWS.AWSRoleModel">
            <summary>
            Role definition.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AWS.CreateAWSRoleModel">
            <summary>
            Role definition.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine">
            <summary>
            The AWS Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.ConfigureRootIAMCredentialsAsync(VaultSharp.V1.SecretsEngines.AWS.ConfigureRootIAMCredentialsModel,System.String)">
            <summary>
            This endpoint configures the root IAM credentials to communicate with AWS. 
            There are multiple ways to pass root IAM credentials to the Vault server, 
            specified below with the highest precedence first. 
            If credentials already exist, this will overwrite them.
            The official AWS SDK is used for sourcing credentials from env vars, 
            shared files, or IAM/ECS instances.
            
            Static credentials provided to the API as a payload
            Credentials in the AWS_ACCESS_KEY, AWS_SECRET_KEY, and AWS_REGION environment 
            variables on the server
            Shared credentials files
            Assigned IAM role or ECS task role credentials
            
            At present, this endpoint does not confirm that the provided AWS credentials are 
            valid AWS credentials with proper permissions.
            </summary>
            <param name="configureRootIAMCredentialsModel"><para>[required]</para>
            The config object.</param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.GetRootIAMCredentialsConfigAsync(System.String,System.String)">
            <summary>
            This endpoint allows you to read non-secure values that have been configured in the config/root endpoint.
            In particular, the secret_key parameter is never returned.
            </summary>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The root config
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.RotateRootIAMCredentialsAsync(System.String)">
            <summary>
            When you have configured Vault with static credentials, 
            you can use this endpoint to have Vault rotate the access key it used. 
            Note that, due to AWS eventual consistency, after calling this endpoint, 
            subsequent calls from Vault to AWS may fail for a few seconds until 
            AWS becomes consistent again.
            In order to call this endpoint, Vault's AWS access key MUST be the only 
            access key on the IAM user; otherwise, generation of a new access key will fail. 
            Once this method is called, Vault will now be the only entity that 
            knows the AWS secret key is used to access AWS.
            </summary>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <returns>
            The new access key Vault uses is returned by this operation.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.ConfigureLeaseAsync(VaultSharp.V1.SecretsEngines.AWS.AWSLeaseConfigModel,System.String)">
            <summary>
            This endpoint configures lease settings for the AWS secrets engine.
            </summary>
            <param name="leaseConfigModel"><para>[required]</para>
            The config object.</param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.GetLeaseConfigAsync(System.String,System.String)">
            <summary>
            This endpoint returns the current lease settings for the AWS secrets engine.
            </summary>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The root config
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.WriteRoleAsync(System.String,VaultSharp.V1.SecretsEngines.AWS.CreateAWSRoleModel,System.String)">
            <summary>
            This endpoint creates or updates the role with the given name. 
            If a role with the name does not exist, it will be created. 
            If the role exists, it will be updated with the new attributes.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="awsRoleModel"><para>[required]</para>
            The role object.</param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.ReadRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries an existing role by the given name.
            If invalid role data was supplied to the role from an earlier version of Vault, 
            then it will show up in the response as invalid_data.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.ReadAllRolesAsync(System.String,System.String)">
            <summary>
            This endpoint lists all existing roles in the secrets engine.
            </summary>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.DeleteRoleAsync(System.String,System.String)">
            <summary>
            Deletes a role
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a dynamic IAM AWS credential based on the named role.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="roleARN">
            The ARN of the role to assume if credential_type on the Vault role is assumed_role. 
            Must match one of the allowed role ARNs in the Vault role. 
            Optional if the Vault role only allows a single AWS role ARN; required otherwise.
            </param>
            <param name="roleSessionName">
            The role session name to attach to the assumed role ARN. 
            Limited to 64 characters; if exceeded, the assumed role ARN will be truncated to 64 characters. 
            If not provided, then it will be generated dynamically by default.
            </param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.GenerateSTSCredentialsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a dynamic IAM AWS credential  with an STS token based on the named role.
            The TTL will be 3600 seconds (one hour).
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="roleARN">
            The ARN of the role to assume if credential_type on the Vault role is assumed_role. 
            Must match one of the allowed role ARNs in the Vault role. 
            Optional if the Vault role only allows a single AWS role ARN; required otherwise.
            </param>
            <param name="roleSessionName">
            The role session name to attach to the assumed role ARN. 
            Limited to 64 characters; if exceeded, the assumed role ARN will be truncated to 64 characters. 
            If not provided, then it will be generated dynamically by default.
            </param>
            <param name="timeToLive"><para>[optional]</para>
            Time to live. Defaults to 1 hour</param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Azure.AzureCredentials">
            <summary>
            Represents the Azure credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Azure.AzureCredentials.ClientId">
            <summary>
            Gets or sets the Client Id.
            </summary>
            <value>
            The Client Id.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Azure.AzureCredentials.ClientSecret">
            <summary>
            Gets or sets the Client secret.
            </summary>
            <value>
            The Client secret.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Azure.IAzureSecretsEngine">
            <summary>
            Azure Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Azure.IAzureSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic Azure token based on the role definition.
            </summary>
            <param name="azureRoleName"><para>[required]</para>
            Name of the Azure role.</param>
            <param name="azureBackendMountPoint"><para>[optional]</para>
            The mount point for the Azure backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Azure" />
            Provide a value only if you have customized the Azure mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Azure.AzureCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Consul.ConsulCredentials">
            <summary>
            Represents the Consul credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Consul.ConsulCredentials.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine">
            <summary>
            Consul Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine.ConfigureAccesssync(VaultSharp.V1.SecretsEngines.Consul.Models.AccessConfigModel,System.String)">
            <summary>
            This endpoint configures the access information for Consul. 
            This access information is used so that Vault can communicate with Consul and generate Consul tokens.
            </summary>
            <param name="accessConfigModel">The request object</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine.WriteRoleAsync(System.String,VaultSharp.V1.SecretsEngines.Consul.Models.CreateConsulRoleModel,System.String)">
            <summary>
            The role endpoint configures a consul role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="createConsulRoleModel">The request</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Consul" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine.ReadRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries an existing role by the given name.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Consul" />
            Provide a value only if you have customized the  mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine.ReadAllRolesAsync(System.String,System.String)">
            <summary>
            This endpoint lists all existing roles in the secrets engine.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Consul" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine.DeleteRoleAsync(System.String,System.String)">
            <summary>
            Deletes a role
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Consul" />
            Provide a value only if you have customized the mount point.</param>
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic Consul token based on the role definition.
            </summary>
            <param name="consulRoleName"><para>[required]</para>
            Name of the Consul role.</param>
            <param name="consulBackendMountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Consul.ConsulCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine">
            <summary>
            Cubbyhole Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine.ReadSecretAsync(System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="secretPath"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine.ReadSecretPathsAsync(System.String,System.String)">
            <summary>
            Retrieves the secret location path entries at the specified location.
            Folders are suffixed with /. The input must be a folder; list on a file will not return a value. 
            The values themselves are not accessible via this API.
            </summary>
            <param name="folderPath"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret list with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine.WriteSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Stores a secret at the specified location.
            </summary>
            <param name="secretPath"><para>[required]</para>
            The location path where the secret needs to be stored.</param>
            <param name="values"><para>[required]</para>
            The values to be written. The values will be overwritten.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine.DeleteSecretAsync(System.String)">
            <summary>
            Deletes the secret at the specified location.
            </summary>
            <param name="secretPath"><para>[required]</para>
            The location path where the secret needs to be deleted from.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviders">
            <summary>
            Names of supported database providers
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType">
            <summary>
            A helper class for retrieving and comparing DatabaseProviderTypes.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.MySQL">
            <summary>
            Gets the MySql provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.PostgreSQL">
            <summary>
            Gets the PostgreSQL provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.MongoDB">
            <summary>
            Gets the MongoDB provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.Oracle">
            <summary>
            Gets the Oracle provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.RedShift">
            <summary>
            Gets the RedShift provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.Type">
            <summary>
            Gets the type type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.op_Equality(VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType,VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.op_Inequality(VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType,VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.Equals(VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType" /> object to and from JSON.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine">
            <summary>
            Database Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.CreateRoleAsync(System.String,VaultSharp.V1.SecretsEngines.Database.Role,System.String)">
            <summary>
            This endpoint creates or updates a role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create. </param>
            <param name="role"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.ReadRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to read. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.ReadAllRolesAsync(System.String,System.String)">
            <summary>
            This endpoint returns a list of available roles. 
            Only the role names are returned, not any values.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.DeleteRoleAsync(System.String,System.String)">
            <summary>
            This endpoint deletes the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to delete. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role to create credentials against.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.CreateStaticRoleAsync(System.String,VaultSharp.V1.SecretsEngines.Database.StaticRole,System.String)">
            <summary>
            This endpoint creates or updates a static role definition. 
            Static Roles are a 1-to-1 mapping of a Vault Role to a user in a database which are automatically 
            rotated based on the configured rotation_period. 
            Not all databases support Static Roles, please see the database-specific documentation.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create. </param>
            <param name="staticRole"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.ReadStaticRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries the static role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to read. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.ReadAllStaticRolesAsync(System.String,System.String)">
            <summary>
            This endpoint returns a list of available static roles. 
            Only the role names are returned, not any values.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.DeleteStaticRoleAsync(System.String,System.String)">
            <summary>
            This endpoint deletes the static role definition and revokes the database user.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to delete. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.GetStaticCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of STATIC credentials based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the static role to get credentials for.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Database.StaticCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.RotateStaticCredentialsAsync(System.String,System.String)">
            <summary>
            This endpoint is used to rotate the Static Role credentials stored for a given role name. 
            While Static Roles are rotated automatically by Vault at configured rotation periods, 
            users can use this endpoint to manually trigger a rotation to change the stored password and 
            reset the TTL of the Static Role's password.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the static role to rotate credentials for.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Database" />
            Provide a value only if you have customized the mount point.</param>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.Role">
            <summary>
            Role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.DatabaseProviderType">
            <summary>
            The name of the database connection to use for this role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.DefaultTimeToLive">
            <summary>
            Specifies the TTL for the leases associated with this role. 
            Accepts time suffixed strings ("1h") or an integer number of seconds. 
            Defaults to system/engine default TTL time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.MaximumTimeToLive">
            <summary>
            Specifies the maximum TTL for the leases associated with this role. 
            Accepts time suffixed strings ("1h") or an integer number of seconds. 
            Defaults to system/mount default TTL time; 
            this value is allowed to be less than the mount max TTL 
            (or, if not set, the system max TTL), but it is not allowed to be longer.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.CreationStatements">
            <summary>
            Specifies the database statements executed to create and configure a user.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.RevocationStatements">
            <summary>
            Specifies the database statements to be executed to revoke a user.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.RollbackStatements">
            <summary>
            Specifies the database statements to be executed rollback a create operation in the event of an error. 
            Not every plugin type will support this functionality. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.RenewStatements">
            <summary>
            Specifies the database statements to be executed to renew a user. 
            Not every plugin type will support this functionality.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.StaticCredentials">
            <summary>
            Static credential definition.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticCredentials.LastVaultRotation">
            <summary>
            Specifies the last time Vault rotated this cred.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticCredentials.RotationPeriod">
            <summary>
            Specifies the rotation period for this cred.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticCredentials.TimeToLive">
            <summary>
            Specifies the remaining time for the creds.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.StaticRole">
            <summary>
            Static role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticRole.Username">
            <summary>
            Specifies the database username that this Vault role corresponds to.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticRole.DatabaseProviderType">
            <summary>
            The name of the database connection to use for this role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticRole.RotationStatements">
            <summary>
            Specifies the database statements to be executed to rotate the password for the configured database user. 
            Not every plugin type will support this functionality. 
            See the plugin's API page for more information on support and formatting for this parameter.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticRole.RotationPeriod">
            <summary>
            Specifies the amount of time Vault should wait before rotating the password. 
            The minimum is 5 seconds.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.EnterpriseProvider">
            <summary>
            Enterprise Secrets Engines
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.IEnterprise">
            <summary>
            Enterprise Secrets Engines
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.IEnterprise.KeyManagement">
            <summary>
            The KeyManagement Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.IEnterprise.KMIP">
            <summary>
            The KMIP Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.IEnterprise.Transform">
            <summary>
            The Transform Secrets Engine.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.IKeyManagementSecretsEngine">
            <summary>
            The KeyManagement Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.IKeyManagementSecretsEngine.ReadKeyAsync(System.String,System.String,System.String)">
            <summary>
            Reads information about a named key.
            The keys object will hold information regarding each key version. 
            Different information will be returned depending on the key type. 
            For example, an asymmetric key will return its public key in a standard format for the type.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to read.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyManagement" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>Key Info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.IKeyManagementSecretsEngine.ReadKeyInKMSAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Reads information about a key that's been distributed to a KMS provider.
            </summary>
            <param name="kmsName"><para>[required]</para>
            Specifies the name of the KMS provider.
            </param>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to read.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyManagement" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>Key Info.</returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKey">
            <summary>
            The KeyMgmt key
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKey.DeletionAllowed">
            <summary>
            
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKey.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKey.LatestVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKey.MinimumEnabledVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKey.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKey.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKMSKey">
            <summary>
            Key in KMS
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKMSKey.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKMSKey.Protection">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKMSKey.Purpose">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.CertificateFormat">
            <summary>
            Represents the Certificate format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.CertificateFormat.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.CertificateFormat.der">
            <summary>
            The DER Encoded format
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.CertificateFormat.pem">
            <summary>
            The PEM encoded format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.CertificateFormat.pem_bundle">
            <summary>
            The PEM Bundle encoded format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.IKMIPSecretsEngine">
            <summary>
            KMIP Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.IKMIPSecretsEngine.GetCredentialsAsync(System.String,System.String,VaultSharp.V1.SecretsEngines.Enterprise.KMIP.CertificateFormat,System.String,System.String)">
            <summary>
            Generates a new client certificate tied to the given role and scope.
            </summary>
            <param name="scopeName"><para>[required]</para>
            Name of the KMIP scope.</param>
            <param name="roleName"><para>[required]</para>
            Name of the KMIP role.</param>
            <param name="format"><para>[required]</para>
            Format to return the certificate, private key, and CA chain in.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KMIP backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KMIP" />
            Provide a value only if you have customized the KMIP mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPCredentials">
            <summary>
            Represents the KMIP credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPCredentials.CAChainContent">
            <summary>
            Gets or sets the ca chain content.
            </summary>
            <value>
            The content of the ca chain.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPCredentials.CertificateContent">
            <summary>
            Gets or sets the content of the certificate.
            </summary>
            <value>
            The content of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPCredentials.PrivateKeyContent">
            <summary>
            Gets or sets the private key.
            </summary>
            <value>
            The private key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPCredentials.SerialNumber">
            <summary>
            Gets or sets the serial number.
            </summary>
            <value>
            The serial number.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodedItem">
            <summary>
            Represents a single Decoded item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodedItem.DecodedValue">
            <summary>
            Specifies the decoded value.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodedItem.Tweak">
            <summary>
            Specifies the base64 encoded tweak that was provided during encoding.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodedResponse">
            <summary>
            Response for decoding.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodedResponse.DecodedItems">
            <summary>
            Decoded items.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodeRequestOptions">
            <summary>
            Represents the Decode Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodeRequestOptions.BatchItems">
            <summary>
            Specifies the transformation within the role that should be used for this decode operation. 
            If a single transformation exists for role, this parameter may be skipped and will be inferred. 
            If multiple transformations exist, one must be specified.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodingItem">
            <summary>
            Represents a single Decoding item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodingItem.Value">
            <summary>
            Specifies the value to be decoded.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodingItem.Transformation">
            <summary>
            Specifies the transformation within the role that should be used for this decode operation. 
            If a single transformation exists for role, this parameter may be skipped and will be inferred. 
            If multiple transformations exist, one must be specified.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodingItem.Tweak">
            <summary>
            Specifies the base64 decoded tweak to use. 
            Only applicable for FPE transformations with supplied as the tweak source.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodedItem">
            <summary>
            Represents a single Encoded item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodedItem.EncodedValue">
            <summary>
            Specifies the encoded value.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodedItem.Tweak">
            <summary>
            Specifies the base64 encoded tweak that was provided during encoding.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodedResponse">
            <summary>
            Response for encoding.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodedResponse.EncodedItems">
            <summary>
            Encoded items.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodeRequestOptions">
            <summary>
            Represents the Encode Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodeRequestOptions.BatchItems">
            <summary>
            Specifies a list of items to be encoded in a single batch. 
            When this parameter is set, the 'value', 'transformation' and 'tweak' parameters are ignored. 
            Instead, the aforementioned parameters should be provided within each object in the list.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodingItem">
            <summary>
            Represents a single Encoding item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodingItem.Value">
            <summary>
            Specifies the value to be encoded.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodingItem.Transformation">
            <summary>
            Specifies the transformation within the role that should be used for this encode operation. 
            If a single transformation exists for role, this parameter may be skipped and will be inferred. 
            If multiple transformations exist, one must be specified.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodingItem.Tweak">
            <summary>
            Specifies the base64 encoded tweak to use. 
            Only applicable for FPE transformations with supplied as the tweak source.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Enterprise.Transform.ITransformSecretsEngine">
            <summary>
            The Transform Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Enterprise.Transform.ITransformSecretsEngine.EncodeAsync(System.String,VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodeRequestOptions,System.String,System.String)">
            <summary>
            This endpoint encodes the provided value using a named role.
            </summary>
            <param name="roleName">
            [required]
            Specifies the role name to use for this operation.
            </param>
            <param name="encodeRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transform backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transform" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with encoded text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Enterprise.Transform.ITransformSecretsEngine.DecodeAsync(System.String,VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodeRequestOptions,System.String,System.String)">
            <summary>
            This endpoint decodes the provided value using a named role.
            </summary>
            <param name="roleName">
            [required]
            Specifies the role name to use for this operation.
            </param>
            <param name="decodeRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transform backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transform" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with decoded text.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptionResponse">
            <summary>
            Decryption output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptionResponse.PlainText">
            <summary>
             Decrypted plain text.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions">
            <summary>
            Decryption input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions.KeyVersion">
            <summary>
             Integer version of the crypto key version to use for decryption. 
             This is required for asymmetric keys. 
             For symmetric keys, Cloud KMS will choose the correct version automatically.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions.CipherText">
            <summary>
             Ciphertext to decrypt as previously returned from an encrypt operation. 
             This must be base64-encoded ciphertext as previously returned from an encrypt operation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions.AdditionalAuthenticatedData">
            <summary>
            Optional data that was specified during encryption of this payload.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptionResponse">
            <summary>
            Encryption output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptionResponse.KeyVersion">
            <summary>
             Integer version of the crypto key.
            </summary>
            <remarks>
            raja todo: why is this not int?
            </remarks>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptionResponse.CipherText">
            <summary>
            Encrypted cipher text.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions">
            <summary>
            Encryption input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions.KeyVersion">
            <summary>
             Integer version of the crypto key version to use for encryption. 
             If unspecified, this defaults to the latest active crypto key version.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions.PlainText">
            <summary>
             Plaintext value to be encrypted. 
             This can be a string or binary, but the size is limited. 
             See the Google Cloud KMS documentation for information on size limitations by key types.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions.AdditionalAuthenticatedData">
            <summary>
             Optional base64-encoded data that, if specified, must also be provided to decrypt this payload.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine">
            <summary>
            GoogleCloud KMS Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.EncryptAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to encrypt arbitrary plaintext string data. 
            The response will be base64-encoded encrypted ciphertext.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for encryption. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="encryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with cipher text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.DecryptAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to decrypt the ciphertext string. 
            For symmetric key types, the provided ciphertext must come from a previous invocation of the /encrypt endpoint. 
            For asymmetric key types, the provided ciphertext must be from the encrypt operation 
            against the corresponding key version's public key.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for decryption. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="decryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with plain text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.ReEncryptAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to re-encrypt the underlying cryptokey to the latest version for this ciphertext without disclosing the original plaintext value to the requestor. 
            This is similar to "rewrapping" in Vault's transit secrets engine.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for encryption. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="reEncryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with cipher text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.SignAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to sign digest string data. 
            The response will include the base64-encoded signature.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for signing. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="signatureOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with signed text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.VerifyAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to verify a signature and digest string data.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for verifying. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="verificationOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with verified text.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptionResponse">
            <summary>
            ReEncryption output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptionResponse.KeyVersion">
            <summary>
             Integer version of the crypto key.
            </summary>
            <remarks>
            raja todo: why is this not int?
            </remarks>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptionResponse.CipherText">
            <summary>
            ReEncrypted cipher text.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions">
            <summary>
            ReEncryption input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions.KeyVersion">
            <summary>
            Integer version of the crypto key version to use for re-encryption. 
            If unspecified, this defaults to the latest active crypto key version.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions.CipherText">
            <summary>
             Ciphertext to be re-encrypted to the latest key version. 
             This must be ciphertext that Vault previously generated for this named key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions.AdditionalAuthenticatedData">
            <summary>
            Optional data that, if specified, must also be provided during decryption.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions">
            <summary>
            Signature input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions.KeyVersion">
            <summary>
             Integer version of the crypto key version to use for signing. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions.Digest">
            <summary>
             Digest to sign. 
             This digest is the base64 encoded binary value, 
             and must match the signing algorithm digest of the Cloud KMS key,
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureResponse">
            <summary>
            Signature output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureResponse.Signature">
            <summary>
            The signature
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions">
            <summary>
            Verification input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions.KeyVersion">
            <summary>
             Integer version of the crypto key version to use for verifying.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions.Digest">
            <summary>
             Digest that was signed. 
             This digest is the base64 encoded binary value, and must match the signing algorithm 
             digest of the Cloud KMS key. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions.Signature">
            <summary>
            Signature of the digest as returned from a signing operation.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationResponse">
            <summary>
            Verification output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationResponse.Valid">
            <summary>
            Flag to indicate if signature is valid.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token">
            <summary>
            Represents the GoogleCloud OAuth2 Token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token.ExpiresAtSeconds">
            <summary>
            Gets or sets expiry time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token.TokenTimeToLive">
            <summary>
            Gets or sets the token time to live.
            </summary>
            <value>
            The ttl.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey">
            <summary>
            Represents the GoogleCloud ServiceAccountKey.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey.Base64EncodedPrivateKeyData">
            <summary>
            Gets or sets the private_key_data.
            </summary>
            <value>
            The private_key_data.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey.KeyAlgorithm">
            <summary>
            Gets or sets the Key algorithm used to generate key. 
            </summary>
            <value>
            The key_algorithm.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey.PrivateKeyType">
            <summary>
            Gets or sets the key_type.
            </summary>
            <value>
            The key_type.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.IGoogleCloudSecretsEngine">
            <summary>
            GoogleCloud Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloud.IGoogleCloudSecretsEngine.GetOAuth2TokenAsync(System.String,System.String,System.String)">
            <summary>
            Generates an OAuth2 token with the scopes defined on the roleset. 
            This OAuth access token can be used in GCP API calls.
            Tokens are non-renewable and have a TTL of an hour by default.
            </summary>
            <param name="roleset"><para>[required]</para>
            Name of an roleset with secret type access_token to generate access_token under.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.GoogleCloud" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloud.IGoogleCloudSecretsEngine.GetServiceAccountKeyAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm,VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType,System.String,System.String,System.String)">
            <summary>
            Generates a service account key.
            These keys are renewable and have TTL/max TTL as defined by either the backend config or the 
            system default if config was not defined.
            </summary>
            <param name="roleset"><para>[required]</para>
            Name of an roleset with secret type service_account_key to generate key under.
            </param>
            <param name="keyAlgorithm"><para>[optional]</para>
            Key algorithm used to generate key. 
            Defaults to 2k RSA key You probably should not choose other values (i.e. 1k).
            </param>
            <param name="privateKeyType"><para>[optional]</para>
             Private key type to generate. Defaults to JSON credentials file. 
            </param>
            <param name="timeToLive"><para>[optional]</para>
            Specifies the Time To Live value provided as a string duration with time suffix. 
            If not set, uses the system default value.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.GoogleCloud" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm">
            <summary>
            Represents the ServiceAccountKeyAlgorithm.
            https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm.KEY_ALG_UNSPECIFIED">
            <summary>
            An unspecified key algorithm.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm.KEY_ALG_RSA_1024">
            <summary>
            1k RSA Key.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm.KEY_ALG_RSA_2048">
            <summary>
            2k RSA Key.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType">
            <summary>
            Represents the ServiceAccountPrivateKeyType.
            https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountPrivateKeyType
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType.TYPE_UNSPECIFIED">
            <summary>
            Unspecified. Equivalent to TYPE_GOOGLE_CREDENTIALS_FILE.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType.TYPE_PKCS12_FILE">
            <summary>
            PKCS12 format. 
            The password for the PKCS12 file is notasecret. 
            For more information, see https://tools.ietf.org/html/rfc7292.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType.TYPE_GOOGLE_CREDENTIALS_FILE">
            <summary>
            Google Credentials File format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.BaseEntityResponse">
            <summary>
            Response object containing some entity metadata and information
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.BaseEntityResponse.Name">
            <summary>
            Name of the entity created or updated.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.BaseEntityResponse.Id">
            <summary>
            ID of the entity created or updated.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.BaseEntityResponse.Aliases">
            <summary>
            List of aliases assigned to the entity.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.BatchDeleteEntitiesRequest">
            <summary>
            Request object containing the list of entities to be deleted.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.CreateEntityByNameRequest">
            <summary>
            Request object to create a entity by name
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.CreateEntityByNameRequest.Name">
            <summary>
            Name of the entity. 
            The recommended format for the name is 'entity-UUID'
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.CreateEntityRequest">
            <summary>
            Request object to create or update an entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.CreateEntityRequest.Id">
            <summary>
            [optional]
            ID of the entity. If set, updates the corresponding existing entity
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.CreateEntityRequest.Name">
            <summary>
            Name of the entity. 
            The recommended format for the name is 'entity-UUID'
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.CreateEntityResponse">
            <summary>
            <inheritdoc cref="T:VaultSharp.V1.SecretsEngines.Identity.BaseEntityResponse"/>
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.CustomizableEntityProperties">
            <summary>
            A base class containing the customizable properties of an entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.CustomizableEntityProperties.Metadata">
            <summary>
            Key-Values pairs of the metadata associated with the entity
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.CustomizableEntityProperties.Policies">
            <summary>
            List of strings which with policies to be tied to the entity
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.CustomizableEntityProperties.Disabled">
            <summary>
            Boolean indicating whether the entity starts disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.Name">
            <summary>
            Name of the entity. 
            The recommended format for the name is 'entity-UUID'
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.Id">
            <summary>
            [optional]
            ID of the entity. If set, updates the corresponding existing entity
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.Metadata">
            <summary>
            Key-Values pairs of the metadata associated with the entity
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.Policies">
            <summary>
            List of strings which with policies to be tied to the entity
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.Disabled">
            <summary>
            Boolean indicating whether the entity is disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.Aliases">
            <summary>
            List of aliases of the entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.BucketKeyHash">
            <summary>
            Bucket Key Hash of the entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.CreationTime">
            <summary>
            Creation Time of the entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.Entity.LastUpdateTime">
            <summary>
            Last Update Time of the entity.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.IdentityToken">
            <summary>
            Represents the IdentityToken
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.IdentityToken.ClientId">
            <summary>
            Gets or sets the Client Id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.IdentityToken.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.IdentityToken.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine">
            <summary>
            Identity Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.GetTokenAsync(System.String,System.String,System.String)">
            <summary>
            Use this endpoint to generate a signed ID (OIDC) token.
            </summary>
            <param name="roleName"><para>[required]</para>
            The name of the role against which to generate a signed ID token.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the Azure mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Identity.IdentityToken" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.IntrospectTokenAsync(System.String,System.String,System.String,System.String)">
            <summary>
            This endpoint can verify the authenticity and active state of a signed ID token.
            </summary>
            <param name="token"><para>[required]</para>
            A signed OIDC compliant ID token.
            </param>
            <param name="clientId"><para>[optional]</para>
            Specifying the client ID optimizes validation time
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the Azure mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            Indicates if the token is active.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.CreateEntityAsync(VaultSharp.V1.SecretsEngines.Identity.CreateEntityRequest,System.String,System.String)">
            <summary>
            This endpoint creates or updates an Entity.
            </summary>
            <param cref="T:VaultSharp.V1.SecretsEngines.Identity.CreateEntityRequest" name="createEntityRequest">
            Request object to create or update an entity.
            </param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param> 
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of 
            seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Identity.CreateEntityResponse"/> as the data
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.ReadEntityByIdAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries the entity by its identifier.
            </summary>
            <param name="entityId">Identifier of the entity.</param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of 
            seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Identity.Entity"/> as the data
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.BatchDeleteEntitiesByIdAsync(VaultSharp.V1.SecretsEngines.Identity.BatchDeleteEntitiesRequest,System.String)">
            <summary>
            This endpoint deletes all entities provided.
            </summary>
            <param cref="T:VaultSharp.V1.SecretsEngines.Identity.BatchDeleteEntitiesRequest" name="batchDeleteEntitiesRequest"></param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.CreateEntityByNameAsync(VaultSharp.V1.SecretsEngines.Identity.CreateEntityByNameRequest,System.String,System.String,System.String)">
            <summary>
            This endpoint is used to create an entity by a given name.
            </summary>
            <param cref="T:VaultSharp.V1.SecretsEngines.Identity.CreateEntityByNameRequest" name="createEntityByNameRequest"></param>
            <param name="name">Name of the entity</param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of 
            seconds or a string duration of seconds.
            </param>
            <returns></returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.DeleteEntityByIdAsync(System.String,System.String)">
            <summary>
            This endpoint deletes an entity and all its associated aliases.
            </summary>
            <param name="entityId">Identifier of the entity.</param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.DeleteEntityByNameAsync(System.String,System.String)">
            <summary>
            This endpoint deletes an entity and all its associated aliases.
            </summary>
            <param name="name">Name of the entity.</param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.ListEntitiesByIdAsync(System.String,System.String)">
            <summary>
            This endpoint returns a list of available entities by their 
            identifiers.
            </summary>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of 
            seconds or a string duration of seconds.
            </param>
            <returns>List of keys.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.ListEntitiesByNameAsync(System.String,System.String)">
            <summary>
            This endpoint returns a list of available entities by their 
            names.
            </summary>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of 
            seconds or a string duration of seconds.
            </param>
            <returns>List of keys.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.MergeEntitiesAsync(VaultSharp.V1.SecretsEngines.Identity.MergeEntitiesRequest,System.String)">
            <summary>
            This endpoint merges many entities into one entity. Additionally, 
            all groups associated with from_entity_ids are merged with those of 
            to_entity_id.
            </summary>
            <param cref="T:VaultSharp.V1.SecretsEngines.Identity.MergeEntitiesRequest" name="mergeEntitiesRequest"></param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.ReadEntityByNameAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries the entity by its name.
            </summary>
            <param name="name">Name of the entity.</param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of 
            seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Identity.Entity"/> as the data
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.UpdateEntityByIdAsync(VaultSharp.V1.SecretsEngines.Identity.UpdateEntityRequest,System.String,System.String,System.String)">
            <summary>
            This endpoint updates an Entity.
            </summary>
            <param cref="T:VaultSharp.V1.SecretsEngines.Identity.UpdateEntityRequest" name="updateEntityRequest">
            Request object to create or update an entity.
            </param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param> 
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of 
            seconds or a string duration of seconds.
            </param>
            <param name="entityId">Id of the entity to be updated</param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Identity.UpdateEntityResponse"/> as the data
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.UpdateEntityByNameAsync(VaultSharp.V1.SecretsEngines.Identity.UpdateEntityByNameRequest,System.String,System.String,System.String)">
            <summary>
            This endpoint updates an Entity by name.
            </summary>
            <param cref="T:VaultSharp.V1.SecretsEngines.Identity.UpdateEntityByNameRequest" name="updateEntityByNameRequest">
            Request object to create or update an entity.
            </param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Identity" />
            Provide a value only if you have customized the mount point.
            </param> 
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of 
            seconds or a string duration of seconds.
            </param>
            <param name="name">Name of the entity to be updated.</param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Identity.UpdateEntityResponse"/> as the data
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.ListEntitiesResponse">
            <summary>
            Returns a list of entity ids.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.MergeEntitiesRequest">
            <summary>
            Request object containing the from_entity_ids and to_entity_id
            to merge a list of entities into a single entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.MergeEntitiesRequest.FromEntityIds">
            <summary>
            [required]
            Entity IDs which needs to get merged.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.MergeEntitiesRequest.ToEntityId">
            <summary>
            [required]
            Entity ID into which all the other entities need to get merged.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.MergeEntitiesRequest.Force">
            <summary>
            [optional]
            Setting this will follow the 'mine' strategy for merging MFA 
            secrets. If there are secrets of the same type both in entities 
            that are merged from and in entity into which all others are 
            getting merged, secrets in the destination will be unaltered. If 
            not set, this API will throw an error containing all the conflicts.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.UpdateEntityByNameRequest">
            <summary>
            Request object to create a entity by name
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.UpdateEntityRequest">
            <summary>
            Request object to update an entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.UpdateEntityRequest.Name">
            <summary>
            Name of the entity. 
            The recommended format for the name is 'entity-UUID'
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.UpdateEntityResponse">
            <summary>
            <inheritdoc cref="T:VaultSharp.V1.SecretsEngines.Identity.BaseEntityResponse"/>
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.ISecretsEngine">
            <summary>
            The secrets engine interface.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Enterprise">
            <summary>
            The Enterprise Secrets Engines.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.ActiveDirectory">
            <summary>
            The ActiveDirectory Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.AliCloud">
            <summary>
            The AliCloud Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.AWS">
            <summary>
            The AWS Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Azure">
            <summary>
            The Azure Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Consul">
            <summary>
            The Consul Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Cubbyhole">
            <summary>
            The Cubbyhole Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Database">
            <summary>
            The Database Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.GoogleCloud">
            <summary>
            The GoogleCloud Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.GoogleCloudKMS">
            <summary>
            The GoogleCloud KMS Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Identity">
            <summary>
            The Identity Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.KeyValue">
            <summary>
            The KeyValue Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Kubernetes">
            <summary>
            The Kubernetes Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.MongoDBAtlas">
            <summary>
            The MongoDBAtlas Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Nomad">
            <summary>
            The Nomad Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.OpenLDAP">
            <summary>
            The OpenLDAP Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.PKI">
            <summary>
            The PKI Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.RabbitMQ">
            <summary>
            The RabbitMQ Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.SSH">
            <summary>
            The SSH Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Terraform">
            <summary>
            The Terraform Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.TOTP">
            <summary>
            The TOTP Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Transit">
            <summary>
            The Transit Secrets Engine.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KeyValue.IKeyValueSecretsEngine">
            <summary>
            The KeyValue Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.IKeyValueSecretsEngine.V1">
            <summary>
            The V1 version of the KeyValue secrets engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.IKeyValueSecretsEngine.V2">
            <summary>
            The V2 version of the KeyValue secrets engine.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1">
            <summary>
            V1 of Key Value Secrets Engine
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.ReadSecretAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV1" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.ReadSecretAsync``1(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV1" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.ReadSecretPathsAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret location path entries at the specified location.
            Folders are suffixed with /. The input must be a folder; list on a file will not return a value. 
            The values themselves are not accessible via this API.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV1" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret list with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.WriteSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Stores a secret at the specified location. If the value does not yet exist, the calling token must have an ACL policy granting the create capability. 
            If the value already exists, the calling token must have an ACL policy granting the update capability.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="values"><para>[required]</para>
            The value to be written.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV1" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The taskwith the secret.
            </returns>
            <remarks>
            Unlike other secrets engines, the KV secrets engine does not enforce TTLs for expiration. 
            Instead, the lease_duration is a hint for how often consumers should check back for a new value. 
            This is commonly displayed as refresh_interval instead of lease_duration to clarify this in output.
            If provided a key of ttl, the KV secrets engine will utilize this value as the lease duration:
            Even with a ttl set, the secrets engine never removes data on its own.The ttl key is merely advisory.
            When reading a value with a ttl, both the ttl key and the refresh interval will reflect the value:
            </remarks>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.WriteSecretAsync``1(System.String,``0,System.String)">
            <summary>
            Stores a secret at the specified location. If the value does not yet exist, the calling token must have an ACL policy granting the create capability. 
            If the value already exists, the calling token must have an ACL policy granting the update capability.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="values"><para>[required]</para>
            The value to be written.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV1" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
            <remarks>
            Unlike other secrets engines, the KV secrets engine does not enforce TTLs for expiration. 
            Instead, the lease_duration is a hint for how often consumers should check back for a new value. 
            This is commonly displayed as refresh_interval instead of lease_duration to clarify this in output.
            If provided a key of ttl, the KV secrets engine will utilize this value as the lease duration:
            Even with a ttl set, the secrets engine never removes data on its own.The ttl key is merely advisory.
            When reading a value with a ttl, both the ttl key and the refresh interval will reflect the value:
            </remarks>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.DeleteSecretAsync(System.String,System.String)">
            <summary>
            Deletes the value at the specified path in Vault.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV1" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest">
            <summary>
            Request Object to create/update/patch a metadata of secret.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest.MaxVersion">
            <summary>
            The number of versions to keep per key. If not set, the backend’s configured max version is used.
            Once a key has more than the configured allowed versions, the oldest version will be permanently deleted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest.CASRequired">
            <summary>
            If true, the key will require the cas parameter to be set on all write requests.
            If false, the backend’s configuration will be used.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest.DeleteVersionAfter">
            <summary>
            Set the delete_version_after value to a duration to specify the deletion_time for all new versions written to this key.
            If not set, the backend's delete_version_after will be used.
            If the value is greater than the backend's delete_version_after, the backend's delete_version_after will be used.
            Accepts [Go duration format string][duration-godoc].
            </summary>
            <example>"0s"</example>
            <example>"3h25m19s"</example>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest.Options">
            <summary>
            An object that holds option settings.
            <para>
            cas - This flag is required if cas_required is set to true on
            either the secret or the engine's config. In order for a write
            to be successful, cas must be set to the current version of
            the secret. A patch operation must be attempted on an existing
            key, thus the provided cas value must be greater than 0.
            </para>
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest.CustomMetadata">
            <summary>
            A map of arbitrary string to string valued user-provided metadata meant to describe the secret.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2">
            <summary>
            V2 of Key Value Secrets Engine
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ConfigureAsync(VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValue2ConfigModel,System.String)">
            <summary>
            This path configures backend level settings that are applied to every key in the key-value store.
            </summary>
            <param name="configModel">The config</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadConfigAsync(System.String,System.String)">
            <summary>
            Reads the common config for all keys.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The config</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretAsync(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="version"><para>[optional]</para>
            Specifies the version to return. If not set the latest version is returned.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretAsync``1(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="version"><para>[optional]</para>
            Specifies the version to return. If not set the latest version is returned.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.WriteSecretAsync``1(System.String,``0,System.Nullable{System.Int32},System.String)">
            <summary>
            Stores a secret at the specified location. If the value does not yet exist, the calling token must have an ACL policy granting the create capability. 
            If the value already exists, the calling token must have an ACL policy granting the update capability.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="data"><para>[required]</para>
            The value to be written.</param>
            <param name="checkAndSet">
            <para>[optional]</para>
            If not set the write will be allowed. If set to 0 a write will only be allowed if the key doesn’t exist. 
            If the index is non-zero the write will only be allowed if the key’s current version matches the version specified in the cas parameter.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
            <remarks>
            Unlike other secrets engines, the KV secrets engine does not enforce TTLs for expiration. 
            Instead, the lease_duration is a hint for how often consumers should check back for a new value. 
            This is commonly displayed as refresh_interval instead of lease_duration to clarify this in output.
            If provided a key of ttl, the KV secrets engine will utilize this value as the lease duration:
            Even with a ttl set, the secrets engine never removes data on its own.The ttl key is merely advisory.
            When reading a value with a ttl, both the ttl key and the refresh interval will reflect the value:
            </remarks>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.PatchSecretAsync(System.String,VaultSharp.V1.SecretsEngines.KeyValue.V2.PatchSecretDataRequest,System.String)">
            <summary>
            Writes the data to the given path in the K/V v2 secrets engine. 
            The data can be of any type. 
            Unlike the <see cref="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.WriteSecretAsync``1(System.String,``0,System.Nullable{System.Int32},System.String)"/> method, the patch command combines the change with existing data 
            instead of replacing them. 
            Therefore, this command makes it easy to make a partial updates to an existing data.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="patchSecretDataRequest"><para>[required]</para>
            The value to be replaced and appended.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretSubkeysAsync(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This endpoint provides the subkeys within a secret entry that 
            exists at the requested path.The secret entry at this path will be
            retrieved and stripped of all data by replacing underlying values 
            of leaf keys (i.e. non-map keys or map keys with no underlying 
            subkeys) with null.
            </summary>
            <param name="path">
            <para>[required]</para>
            Specifies the path of the secret to read. This is specified as part
            of the URL.
            </param>
            <param name="version">
            Specifies the version to return. If not set the latest version is
            returned.
            </param>
            <param name="depth">
            Specifies the deepest nesting level to provide in the output. The 
            default value 0 will not impose any limit. If non-zero, keys that 
            reside at the specified depth value will be artificially treated as
            leaves and will thus be null even if further underlying subkeys 
            exist.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>Subkeys Info for specified version and depth.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.DeleteSecretAsync(System.String,System.String)">
            <summary>
            This endpoint issues a soft delete of the secret's latest version at the specified location. 
            This marks the version as deleted and will stop it from being returned from reads, 
            but the underlying data will not be removed. A delete can be undone using the Undelete method.
            </summary>
            <param name="path"><para>[required]</para>
            Specifies the path of the secret to delete.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.DeleteSecretVersionsAsync(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            This endpoint issues a soft delete of the secret's latest version at the specified location. 
            This marks the version as deleted and will stop it from being returned from reads, 
            but the underlying data will not be removed. A delete can be undone using the Undelete method.
            </summary>
            <param name="path"><para>[required]</para>
            Specifies the path of the secret to delete.</param>
            <param name="versions">
            <para>[required]</para>
            The versions to delete.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.UndeleteSecretVersionsAsync(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Undeletes the data for the provided version and path in the key-value store.
            This restores the data, allowing it to be returned on get requests.
            </summary>
            <param name="path"><para>[required]</para>
            Specifies the path of the secret to undelete.</param>
            <param name="versions">
            <para>[required]</para>
            The versions to undelete.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.DestroySecretVersionsAsync(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Permanently removes the specified version data for the provided key and version numbers from the key-value store.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="versions">
            <para>[required]</para>
            The versions to destroy. Their data will be permanently deleted.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretPathsAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret location path entries at the specified location.
            Folders are suffixed with /. The input must be a folder; list on a file will not return a value. 
            The values themselves are not accessible via this API.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret list with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretMetadataAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret metadata at the specified location.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret metadata.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.WriteSecretMetadataAsync(System.String,VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest,System.String)">
            <summary>
            Creates or updates the metadata of a secret at the specified location in 
            the K/V v2 secrets engine.
            It does not create a new version.
            </summary>
            <param name="path">
            <para>[required]</para>
            The path where the value is to be stored.
            </param>
            <param name="customMetadataRequest">
            <para>[required]</para>
            The value to be written.
            </param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the Generic backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.PatchSecretMetadataAsync(System.String,VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest,System.String)">
            <summary>
            Patch the metadata of a secret at specified location in the K/V v2 secrets engine.
            The patch command combines the change with existing custom metadata instead of replacing them.
            Therefore, this command makes it easy to make a partial updates to an existing metadata.
            </summary>
            <param name="path">
            <para>[required]</para>
            The path where the value is to be stored.
            </param>
            <param name="customMetadataRequest">
            <para>[required]</para>
            The value to be replaced and appended.
            </param>
            <param name="mountPoint">
            <para>[optional]</para>
            The mount point for the Generic backend. 
            Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.DeleteMetadataAsync(System.String,System.String)">
            <summary>
            This endpoint permanently deletes the key metadata and all version data for the specified key. 
            All version history will be removed.
            </summary>
            <param name="path"><para>[required]</para>
            Specifies the path of the secret to delete.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to "secret"
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KeyValue.V2.PatchSecretDataRequest">
            <summary>
            Request Object to patch a secret.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.V2.PatchSecretDataRequest.Options">
            <summary>
            An object that holds option settings.
            <para>
            cas - This flag is required if cas_required is set to true on 
            either the secret or the engine's config. In order for a write 
            to be successful, cas must be set to the current version of 
            the secret. A patch operation must be attempted on an existing 
            key, thus the provided cas value must be greater than 0.
            </para>
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.V2.PatchSecretDataRequest.Data">
            <summary>
            The contents of the data map will be applied as a partial update 
            to the existing entry via a JSON merge patch to the existing entry.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Kubernetes.IKubernetesSecretsEngine">
            <summary>
            Kubernetes Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Kubernetes.IKubernetesSecretsEngine.GetCredentialsAsync(System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Generate a service account token.
            </summary>
            <param name="kubernetesRoleName"><para>[required]</para>
            Name of the role to generate credentials for.
            </param>
            <param name="kubernetesNamespace"><para>[required]</para>
            The name of the Kubernetes namespace in which to generate the credentials.
            </param>
            <param name="clusterRoleBinding"><para>[optional]</para>
            If true, generate a ClusterRoleBinding to grant permissions across the whole cluster instead of within a namespace. 
            Requires the Vault role to have kubernetes_role_type set to ClusterRole.
            </param>
            <param name="timeToLive"><para>[optional]</para>
            The TTL of the generated Kubernetes service account token, specified in seconds or as a Go duration format string, e.g. "1h". 
            The TTL returned may be different from the TTL specified due to limits specified in Kubernetes, 
            Vault system-wide controls, or role-specific controls.
            </param>
            <param name="kubernetesBackendMountPoint"><para>[optional]</para>
            The mount point for the Kubernetes backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Kubernetes" />
            Provide a value only if you have customized the Kubernetes mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Kubernetes.KubernetesCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Kubernetes.KubernetesCredentials">
            <summary>
            Represents the Kubernetes credentials.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.MongoDBAtlas.IMongoDBAtlasSecretsEngine">
            <summary>
            MongoDBAtlas Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.MongoDBAtlas.IMongoDBAtlasSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic MongoDBAtlas cred based on the role definition.
            </summary>
            <param name="name"><para>[required]</para>
            Unique identifier name of the credential
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the MongoDBAtlas backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.MongoDBAtlas" />
            Provide a value only if you have customized the MongoDBAtlas mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials">
            <summary>
            Represents the MongoDBAtlas credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.LeaseDuration">
            <summary>
            Gets or sets the lease duration seconds.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.LeaseRenewable">
            <summary>
            Gets or sets the lease renewable flag.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.Description">
            <summary>
            Gets or sets the description of the creds.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Nomad.INomadSecretsEngine">
            <summary>
            Nomad Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Nomad.INomadSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic Nomad token based on the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of an existing role against which to create this Nomad token.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Nomad backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Nomad" />
            Provide a value only if you have customized the Nomad mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials">
            <summary>
            Represents the Nomad credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials.AccessorId">
            <summary>
            Gets or sets the accessor id.
            </summary>
            <value>
            The accessor id.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials.SecretId">
            <summary>
            Gets or sets the secret id.
            </summary>
            <value>
            The secret id.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.OpenLDAP.IOpenLDAPSecretsEngine">
            <summary>
            Cubbyhole Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.OpenLDAP.IOpenLDAPSecretsEngine.GetStaticCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of STATIC credentials based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the static role to get credentials for.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the OpenLDAP backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.OpenLDAP" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials">
            <summary>
            Static credential definition.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials.DistinguishedName">
            <summary>
            Specifies the Distinguished Name
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials.LastVaultRotation">
            <summary>
            Specifies the last vault rotation for this cred.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials.RotationPeriod">
            <summary>
            Specifies the rotation period for this cred.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials.TimeToLive">
            <summary>
            Specifies the remaining time for the creds.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData">
            <summary>
            Represents a Certificate.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData.CertificateFormat">
            <summary>
            Gets or sets the certificate format.
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData.CertificateContent">
            <summary>
            Gets or sets the content of the certificate.
            </summary>
            <value>
            The content of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData.SerialNumber">
            <summary>
            Gets or sets the serial number.
            </summary>
            <value>
            The serial number.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.AbstractIssuedCertificateData">
            <summary>
            Represents the generated Certificate.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractIssuedCertificateData.IssuingCACertificateContent">
            <summary>
            Gets or sets the content of the issuing ca certificate.
            </summary>
            <value>
            The content of the issuing ca certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractIssuedCertificateData.CAChainContent">
            <summary>
            Gets or sets the ca chain content.
            </summary>
            <value>
            The content of the ca chain.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateAutoTidyRequest">
            <summary>
            Represents the Certificate Auto Tidy Request.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateAutoTidyRequest.TidyCertStore">
            <summary>
            Specifies whether to tidy up the certificate store. Defaults to false.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateAutoTidyRequest.TidyRevokedCerts">
            <summary>
            Set to true to expire all revoked and expired certificates, removing them both from the CRL and from storage. 
            The CRL will be rotated if this causes any values to be removed.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateAutoTidyRequest.SafetyBuffer">
            <summary>
            Specifies A duration (given as an integer number of seconds or a string; defaults to 72h) 
            Used as a safety buffer to ensure certificates are not expunged prematurely; 
            as an example, this can keep certificates from being removed from the CRL that, due to clock skew,
            might still be considered valid on other hosts. 
            For a certificate to be expunged, the time must be after the expiration time of the certificate 
            (according to the local clock) plus the duration of safety_buffer.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials">
            <summary>
            Represents the generated Certificate credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials.PrivateKeyContent">
            <summary>
            Gets or sets the private key.
            </summary>
            <value>
            The private key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials.PrivateKeyType">
            <summary>
            Gets or sets the type of the private key.
            </summary>
            <value>
            The type of the private key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>
            The expiration.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions">
            <summary>
            Represents the Certificate credentials request options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.CommonName">
            <summary>
            <para>[required]</para>
            Gets or sets the requested CN for the certificate. 
            If the CN is allowed by role policy, it will be issued.
            </summary>
            <value>
            The name of the common.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.SubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Subject Alternative Names, in a comma-delimited list. 
            These can be host names or email addresses; they will be parsed into their respective fields. 
            If any requested names do not match role policy, the entire request will be denied.
            </summary>
            <value>
            The subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.IPSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested IP Subject Alternative Names, in a comma-delimited list. 
            Only valid if the role allows IP SANs (which is the default).
            </summary>
            <value>
            The ip subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.URISubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested URI Subject Alternative Names, in a comma-delimited list.
            </summary>
            <value>
            The uri subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.OtherSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the custom OID/UTF8-string SANs. 
            These must match values specified on the role in allowed_other_sans (globbing allowed). 
            The format is the same as OpenSSL: [oid];[type]:[value] where the only current valid type is UTF8. 
            This can be a comma-delimited list or a JSON string slice.
            </summary>
            <value>
            The other subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Time To Live. 
            Cannot be greater than the role's max_ttl value. 
            If not provided, the role's ttl value will be used. 
            Note that the role values default to system values if not explicitly set.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.CertificateFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets the certificate format for returned data. 
            Can be pem or der; defaults to pem. 
            If der, the output is base64 encoded..
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.PrivateKeyFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets the the format for marshaling the private key. 
            Defaults to der which will return either base64-encoded DER or PEM-encoded DER, 
            depending on the value of format. 
            The other option is pkcs8 which will return the key marshalled as PEM-encoded PKCS8.
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.ExcludeCommonNameFromSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [exclude common name from subject alternative names].
            If set, the given common name will not be included in DNS or Email Subject Alternate Names (as appropriate). 
            Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
            </summary>
            <value>
            <c>true</c> if [exclude common name from subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateData">
            <summary>
            Represents a Certificate.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat">
            <summary>
            Represents the Certificate format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.der">
            <summary>
            The DER Encoded format
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.pem">
            <summary>
            The PEM encoded format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.pem_bundle">
            <summary>
            The PEM Bundle encoded format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateKeys">
            <summary>
            Vault Response Model containing list of certificate keys (serial numbers)
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateKeys.Keys">
            <summary>
            Gets or sets list of certificate keys (serial numbers)
            </summary>
            <value>
            List of certificate keys (serial numbers)
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType">
            <summary>
            Represents the Certificate key type.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType.rsa">
            <summary>
            The RSA Key type.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType.ec">
            <summary>
            The Elliptic Curve key type.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType.ed25519">
            <summary>
            The Ed25519 Key type.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest">
            <summary>
            Represents the Certificate Tidy Request.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest.TidyCertStore">
            <summary>
            Specifies whether to tidy up the certificate store. Defaults to false.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest.TidyRevokedCerts">
            <summary>
            Set to true to expire all revoked and expired certificates, removing them both from the CRL and from storage. 
            The CRL will be rotated if this causes any values to be removed.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest.SafetyBuffer">
            <summary>
            Specifies A duration (given as an integer number of seconds or a string; defaults to 72h) 
            Used as a safety buffer to ensure certificates are not expunged prematurely; 
            as an example, this can keep certificates from being removed from the CRL that, due to clock skew,
            might still be considered valid on other hosts. 
            For a certificate to be expunged, the time must be after the expiration time of the certificate 
            (according to the local clock) plus the duration of safety_buffer.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyState">
            <summary>
            Represents the Certificate tidy state.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine">
            <summary>
            The PKI Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.GetCredentialsAsync(System.String,VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions,System.String,System.String)">
            <summary>
            Generates a new set of credentials (private key and certificate) based on the role named in the endpoint.
            The issuing CA certificate is returned as well, so that only the root CA need be in a client's trust store.
            The private key is not stored.
            If you do not save the private key, you will need to request a new certificate.
            </summary>
            <param name="pkiRoleName"><para>[required]</para>
            Name of the PKI role.
            </param>
            <param name="certificateCredentialRequestOptions"><para>[required]</para>
            The certificate credential request options.
            </param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the new Certificate credentials.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.SignCertificateAsync(System.String,VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions,System.String,System.String)">
            <summary>
            This endpoint signs a new certificate based upon the provided CSR and the supplied parameters,
            subject to the restrictions contained in the role named in the endpoint.
            The issuing CA certificate is returned as well, so that only the root CA need be in a client's trust store.
            </summary>
            <param name="pkiRoleName"><para>[required]</para>
            Name of the PKI role.
            </param>
            <param name="signCertificateRequestOptions"><para>[required]</para>
            The sign certificate request options.
            </param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the signed Certificate.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.RevokeCertificateAsync(System.String,System.String)">
            <summary>
            This endpoint revokes a certificate using its serial number. 
            This is an alternative option to the standard method of revoking using Vault lease IDs.
            A successful revocation will rotate the CRL.
            </summary>
            <param name="serialNumber"><para>[required]</para>
            Specifies the serial number of the certificate to revoke, in hyphen-separated or colon-separated octal.
            </param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The secret with the Certificate revokation info.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.TidyAsync(VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest,System.String)">
            <summary>
            This endpoint allows tidying up the storage backend and/or CRL by removing certificates that have expired 
            and are past a certain buffer period beyond their expiration time.
            </summary>
            <param name="certificateTidyRequest">The request object</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.AutoTidyAsync(VaultSharp.V1.SecretsEngines.PKI.CertificateAutoTidyRequest,System.String)">
            <summary>
            This endpoint allows auto tidying up the storage backend and/or CRL by removing certificates that have expired 
            and are past a certain buffer period beyond their expiration time.
            </summary>
            <param name="certificateAutoTidyRequest">The request object</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.GetTidyStatusAsync(System.String)">
            <summary>
            This is a read only endpoint that returns information about the current tidy operation, 
            or the most recent if none are currently running.
            </summary>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>The tidy status</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.CancelTidyAsync(System.String)">
            <summary>
            This endpoint allows cancelling a running tidy operation. 
            It takes no parameter and cancels the tidy at the next available checkpoint, 
            which may process additional certificates between when the operation was 
            marked as cancelled and when the operation stopped.
            </summary>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>The tidy status</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.ReadCACertificateAsync(VaultSharp.V1.SecretsEngines.PKI.CertificateFormat,System.String)">
            <summary>
            Retrieves the CA certificate in raw DER-encoded form. 
            This is a bare endpoint that does not return a standard Vault data structure. 
            The CA certificate can be returned in DER or PEM format.
            This is an unauthenticated endpoint.
            </summary>
            <param name="certificateFormat"><para>[optional]</para>
            The certificate format needed.
            Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.der" /></param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The raw certificate data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.ReadCertificateAsync(System.String,System.String)">
            <summary>
            Retrieves a certificate by key (serial number). The certificate format is always <see cref="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.pem"/>.
            This is an unauthenticated endpoint.
            </summary>
            <param name="serialNumber">
            The serial number of the certificate to be retrieved (Example: '17:67:16:b0:b9:45:58:c0:3a:29:e3:cb:d6:98:33:7a:a6:3b:66:c1').
            To retrieve the CA certificate, use the value 'ca'.
            To retrieve the CA Chain, use the value 'ca_chain'.
            To retrieve the current CRL, use the value 'crl'.
            </param>
            <param name="pkiBackendMountPoint">
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The secret with the certificate data
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.ListCertificatesAsync(System.String)">
            <summary>
            Retrieves a list of all certificate keys (serial numbers).
            </summary>
            <param name="pkiBackendMountPoint">
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The secret with the list of certificate keys (serial numbers)
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.ListRevokedCertificatesAsync(System.String)">
            <summary>
            Retrieves a list of all revoked certificate keys (serial numbers).
            </summary>
            <param name="pkiBackendMountPoint">
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The secret with the list of revoked certificate keys (serial numbers)
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat">
            <summary>
            Represents the Private key format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat.der">
            <summary>
            The DER Encoded format
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat.pkcs8">
            <summary>
            The PKCS8 encoded format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.RawCertificateData">
            <summary>
            Represents the raw certificate contents.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.RawCertificateData.CertificateContent">
            <summary>
            Gets or sets the content of the certificate.
            </summary>
            <value>
            The content of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.RawCertificateData.RevocationTime">
            <summary>
            Gets or sets the revocation time.
            </summary>
            <value>
            The revocation time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.RawCertificateData.EncodedCertificateFormat">
            <summary>
            Gets or sets the encoded certificate format.
            </summary>
            <value>
            The encoded certificate format.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.RevokeCertificateResponse">
            <summary>
            Represents the Certificate revocation response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.RevokeCertificateResponse.RevocationTime">
            <summary>
            Gets or sets the revocation time.
            </summary>
            <value>
            The revocation time.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions">
            <summary>
            Represents the Sign Certificate request options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.Csr">
            <summary>
            <para>[required]</para>
             Specifies the PEM-encoded CSR
            </summary>
            <value>
             Encoded CSR.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.CommonName">
            <summary>
            <para>[required]</para>
            Gets or sets the requested CN for the certificate. 
            If the CN is allowed by role policy, it will be issued.
            </summary>
            <value>
            The name of the common.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.SubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Subject Alternative Names, in a comma-delimited list. 
            These can be host names or email addresses; they will be parsed into their respective fields. 
            If any requested names do not match role policy, the entire request will be denied.
            </summary>
            <value>
            The subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.IPSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested IP Subject Alternative Names, in a comma-delimited list. 
            Only valid if the role allows IP SANs (which is the default).
            </summary>
            <value>
            The ip subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.URISubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested URI Subject Alternative Names, in a comma-delimited list.
            </summary>
            <value>
            The uri subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.OtherSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the custom OID/UTF8-string SANs. 
            These must match values specified on the role in allowed_other_sans (globbing allowed). 
            The format is the same as OpenSSL: [oid];[type]:[value] where the only current valid type is UTF8. 
            This can be a comma-delimited list or a JSON string slice.
            </summary>
            <value>
            The other subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Time To Live. 
            Cannot be greater than the role's max_ttl value. 
            If not provided, the role's ttl value will be used. 
            Note that the role values default to system values if not explicitly set.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.CertificateFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets the certificate format for returned data. 
            Can be pem or der; defaults to pem. 
            If der, the output is base64 encoded..
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.ExcludeCommonNameFromSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [exclude common name from subject alternative names].
            If set, the given common name will not be included in DNS or Email Subject Alternate Names (as appropriate). 
            Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
            </summary>
            <value>
            <c>true</c> if [exclude common name from subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.SignedCertificateData">
            <summary>
            Represents the signed Certificate.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine">
            <summary>
            The RabbitMQ Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role to create credentials against.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.RabbitMQ" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine.ConfigureLeaseAsync(VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQLease,System.String)">
            <summary>
            Configures the lease settings for generated credentials.
            </summary>
            <param name="lease"><para>[required]</para>
            The lease settings.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.RabbitMQ" />
            Provide a value only if you have customized the mount point.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine.CreateRoleAsync(System.String,VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQRole,System.String)">
            <summary>
            Creates or updates the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create.</param>
            <param name="role"><para>[required]</para>
            The role definition to be created.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.RabbitMQ" />
            Provide a value only if you have customized the mount point.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine.ReadRoleAsync(System.String,System.String)">
            <summary>
            Queries the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to read.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.RabbitMQ" />
            Provide a value only if you have customized the mount point.</param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQRole" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine.DeleteRoleAsync(System.String,System.String)">
            <summary>
            Deletes the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.RabbitMQ" />
            Provide a value only if you have customized the mount point.</param>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQLease.TimeToLive">
            <summary>
            Specifies the lease ttl provided in seconds.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQLease.MaximumTimeToLive">
            <summary>
            Specifies the maximum ttl provided in seconds.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQRole.Tags">
            <summary>
            Specifies a comma-separated RabbitMQ management tags
            </summary>
            <value>
            The tags
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQRole.VHosts">
            <summary>
            Specifies a map of virtual hosts to permissions. 
            This can be base64-encoded to avoid string escaping.
            See https://developer.hashicorp.com/vault/api-docs/secret/rabbitmq#create-role for examples
            </summary>
            <value>
            The virtual hosts role.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQRole.VHostTopics">
            <summary>
            Specifies a map of virtual hosts and exchanges to topic permissions. This option requires RabbitMQ 3.7.0 or later. 
            This can be base64-encoded to avoid string escaping.
            See https://developer.hashicorp.com/vault/api-docs/secret/rabbitmq#create-role for examples
            </summary>
            <value>
            The virtual hosts topics.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SecretsEngine">
            <summary>
            Represents a secret backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngine.Type">
            <summary>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SecretsEngineType">
            <summary>
            A helper class for retrieving and comparing SecretsEngine Backend types.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.System">
            <summary>
            Gets the system type.
            </summary>
            <value>
            The system.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.AliCloud">
            <summary>
            Gets the alicloud type.
            </summary>
            <value>
            The aws.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.AWS">
            <summary>
            Gets the aws type.
            </summary>
            <value>
            The aws.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Consul">
            <summary>
            Gets the consul type.
            </summary>
            <value>
            The consul.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.CubbyHole">
            <summary>
            Gets the cubby hole type.
            </summary>
            <value>
            The cubby hole.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.KeyValueV1">
            <summary>
            Gets the generic type v1.
            </summary>
            <value>
            The generic.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.KeyValueV2">
            <summary>
            Gets the generic type v2.
            </summary>
            <value>
            The generic.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Identity">
            <summary>
            Gets the Identity type.
            </summary>
            <value>
            The Identity.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Nomad">
            <summary>
            Gets the Nomad type.
            </summary>
            <value>
            The Nomad.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.PKI">
            <summary>
            Gets the pki type.
            </summary>
            <value>
            The pki.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.RabbitMQ">
            <summary>
            Gets the rabbit mq type.
            </summary>
            <value>
            The rabbit mq.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.SSH">
            <summary>
            Gets the SSH type.
            </summary>
            <value>
            The SSH.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Terraform">
            <summary>
            Gets the Terraform type.
            </summary>
            <value>
            The Terraform.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.TOTP">
            <summary>
            Gets the TOTP type.
            </summary>
            <value>
            The TOTP.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Transit">
            <summary>
            Gets the transit type.
            </summary>
            <value>
            The transit.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SecretsEngines.SecretsEngineType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.op_Equality(VaultSharp.V1.SecretsEngines.SecretsEngineType,VaultSharp.V1.SecretsEngines.SecretsEngineType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.op_Inequality(VaultSharp.V1.SecretsEngines.SecretsEngineType,VaultSharp.V1.SecretsEngines.SecretsEngineType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.Equals(VaultSharp.V1.SecretsEngines.SecretsEngineType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SecretsEngineTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SecretsEngines.SecretsEngineType" /> object to and from JSON.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.ISSHSecretsEngine">
            <summary>
            The SSH Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SSH.ISSHSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a dynamic SSH credentials for a specific username and IP Address based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the SSH Role.</param>
            <param name="ipAddress"><para>[required]</para>
            The ip address of the remote host.</param>
            <param name="username"><para>[optional]</para>
            The username on the remote host.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the SSH credentials.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SSH.ISSHSecretsEngine.SignKeyAsync(System.String,VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest,System.String)">
            <summary>
            This endpoint signs an SSH public key based on the supplied parameters, 
            subject to the restrictions contained in the role named in the endpoint.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to sign.</param>
            <param name="signKeyRequest"><para>[required]</para>
            The request parameters</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <returns>The signed key</returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.SignedKeyResponse">
            <summary>
            Response from signing a key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignedKeyResponse.SerialNumber">
            <summary>
            The serial number of the key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignedKeyResponse.SignedKey">
            <summary>
            The signed key
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest">
            <summary>
            Request for signing a key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.PublicKey">
            <summary>
            <para>[required]</para>
            Specifies the SSH public key that should be signed.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.TimeToLive">
            <summary>
            <para>[optional]</para>
            Specifies the Requested Time To Live. 
            Cannot be greater than the role's max_ttl value. 
            If not provided, the role's ttl value will be used. 
            Note that the role values default to system values if not explicitly set.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.ValidPrincipals">
            <summary>
            <para>[optional]</para>
            Specifies valid principals, either usernames or hostnames, that the certificate should be signed for.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.CertificateType">
            <summary>
            <para>[required]</para>
            Specifies the type of certificate to be created; either "user" or "host".
            Defaults to "user"
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.KeyId">
            <summary>
            <para>[optional]</para>
            Specifies the key id that the created certificate should have. 
            If not specified, the display name of the token will be used.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.CriticalOptions">
            <summary>
            <para>[optional]</para>
            Specifies a map of the critical options that the certificate should be signed for.
            Defaults to none.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.Extension">
            <summary>
            <para>[optional]</para>
            Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials">
            <summary>
            SSH Credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.KeyType">
            <summary>
            Type of credentials
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.SSHKeyType">
            <summary>
            Represents the type of SSH key to be generated.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.SSH.SSHKeyType.otp">
            <summary>
            The one time password.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.SSH.SSHKeyType.dynamic">
            <summary>
            The dynamic key.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.SSH.SSHKeyType.ca">
            <summary>
            The ca key.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Terraform.ITerraformSecretsEngine">
            <summary>
            The Terraform Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Terraform.ITerraformSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Returns a Terraform Cloud token based on the given role definition. 
            For Organization and Team roles, the same API token is returned until 
            the token is rotated with rotate-role. 
            For User roles, a new token is generated with each request.
            </summary>
            <param name="roleName">[required]
             Specifies the name of an existing role against which to create this Terraform Cloud token.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Terraform" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>Terraform Cloud token</returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TerraformCredentials">
            <summary>
            Represents Terraform credentials
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TerraformCredentials.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TerraformCredentials.TokenId">
            <summary>
            Gets or sets the token id.
            </summary>
            <value>
            The token id.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.AbstractTOTPKeyGenerationOption.Issuer">
            <summary>
            Gets or sets the name of the issuing organization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.AbstractTOTPKeyGenerationOption.AccountName">
            <summary>
            Gets or sets the name of the account associated with the key.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine">
            <summary>
            The TOTP Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.CreateKeyAsync(System.String,VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest,System.String)">
            <summary>
            This endpoint creates or updates a key definition.
            </summary>
            <param name="keyName"><para>[required]</para>
            The name of the key.
            </param>
            <param name="createKeyRequest"><para>[required]</para>
            The create key options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
            <returns>The barcode and url of the key.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.ReadKeyAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves a TOTP key.
            </summary>
            <param name="keyName"><para>[required]</para>
            The name of the key to retrieve.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>Key Info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.ReadAllKeysAsync(System.String,System.String)">
            <summary>
            Returns a list of available keys. Only the key names are returned, not any values.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.TOTP" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>List of available keys</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.DeleteKeyAsync(System.String,System.String)">
            <summary>
            Deletes a TOTP key.
            </summary>
            <param name="keyName"><para>[required]</para>
            The name of the key to delete.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.GetCodeAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new time-based one-time use password based on the named key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to create credentials against.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCode" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.ValidateCodeAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Generates a new time-based one-time use password based on the named key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to create credentials against.
            </param>
            <param name="code"><para>[required]</para>
            Specifies the the password you want to validate.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCode" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCode">
            <summary>
            Represents the TOTP Code.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCode.Code">
            <summary>
            Gets or sets the TOTP code.
            </summary>
            <value>
            The TOTP code.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCodeValidity">
            <summary>
            Represents the TOTP Code validity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCodeValidity.Valid">
            <summary>
            Gets or sets the TOTO code validity.
            </summary>
            <value>
            The TOTP code validity.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.KeyGenerationOption">
            <summary>
            Gets or sets if a key should be generated by Vault or if a key is being passed from another service.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.Issuer">
            <summary>
            Gets or sets the name of the issuing organization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.AccountName">
            <summary>
            Gets or sets the name of the account associated with the key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.Period">
            <summary>
            Specifies the length of time in seconds used to generate a counter for the TOTP code calculation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.Algorithm">
            <summary>
            Specifies the hashing algorithm used to generate the TOTP code. 
            Options include "SHA1", "SHA256" and "SHA512".
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.Digits">
            <summary>
            Gets or sets the number of digits in the generated TOTP code.
            This value can be set to 6 or 8.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyResponse">
            <summary>
            Represents the result when creating a new key
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyResponse.Barcode">
            <summary>
            Gets or sets the Barcode
            </summary>
            <remarks>
            If a QR code is returned, it consists of base64-formatted PNG bytes.
            You can embed it in a web page by including the base64 string
            in an 'img'-tag with the prefix data:image/png;base64
            </remarks>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyResponse.Url">
            <summary>
            Gets or sets the Url
            </summary>
            <remarks>
            The Url can be used by the client application in order to create
            TOTP codes.
            </remarks>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey">
            <summary>
            Represents a queried key
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.AccountName">
            <summary>
            Gets or sets the name of the account associated with the key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.Algorithm">
            <summary>
            Gets or sets the used hashing algorithm.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.Digits">
            <summary>
            Gets or sets the number of digits in the generated TOTP code.
            This value can be set to 6 or 8.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.Issuer">
            <summary>
            Gets or sets the name of the issuing organization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.Period">
            <summary>
            Gets or sets the length of time in seconds used to
            create a counter for the TOTP code calculation.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPNonVaultBasedKeyGeneration">
            <summary>
            Specifies that the key is generated by some other service.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPNonVaultBasedKeyGeneration.Url">
            <summary>
            Specifies the TOTP key url string that can be used to configure a key. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPNonVaultBasedKeyGeneration.Key">
            <summary>
            Specifies the master key used to generate a TOTP code.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration">
            <summary>
            Specifies that the key should be generated by Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration.Exported">
            <summary>
             Specifies if a QR code and url are returned upon generating a key. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration.KeySize">
            <summary>
            Specifies the size in bytes of the Vault generated key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration.Skew">
            <summary>
            Specifies the number of delay periods that are allowed when validating a TOTP code. 
            This value can be either 0 or 1.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration.QRSize">
            <summary>
            Specifies the pixel size of the square QR code when generating a new key.
            Only used if and exported is true. 
            If this value is 0, a QR code will not be returned.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.BackupKeyResponse">
            <summary>
            Data returned from an encryption key backup.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.BackupKeyResponse.BackupData">
            <summary>
            The backup data for the key.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.CacheConfigRequestOptions">
            <summary>
            Options for configuring the transit engine's cache.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CacheConfigRequestOptions.Size">
            <summary>
            Gets or sets the size, in terms of number of entries.
            </summary>
            <remarks>Must be 0 (default) or a value greater than or equal to 10 (minimum cache size).</remarks>
            <value>The size, in terms of number of entries.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.CacheResponse">
            <summary>
            Represents the cache configuration response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CacheResponse.Size">
            <summary>
            Gets or sets the size of the cache, in terms of the number of entries.
            </summary>
            <value>The size of the cache, in terms of the number of entries.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.CipherTextData">
            <summary>
            Represents the Cipher text data.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CipherTextData.CipherText">
            <summary>
            Gets or sets the cipher text.
            </summary>
            <value>
            The cipher text.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions">
            <summary>
            Options used when creating new named encryption key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions.ConvergentEncryption">
            <summary>
            If enabled, the key will support convergent encryption, where the same plaintext creates the same
            ciphertext.This requires derived to be set to true. When enabled, each encryption(/decryption/rewrap/datakey)
            operation will derive a nonce value rather than randomly generate it.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions.Derived">
            <summary>
            Specifies if key derivation is to be used.If enabled, all encrypt/decrypt requests to this named
            key must provide a context which is used for key derivation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions.Exportable">
            <summary>
            Enables keys to be exportable. This allows for all the valid keys in the key ring to be
            exported. Once set, this cannot be disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions.AllowPlaintextBackup">
            <summary>
            If set, enables taking backup of named key in the plaintext format.Once set, this cannot be disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions.Type">
            <summary>
            Specifies the type of key to create.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions.KeySize">
            <summary>
            The key size in bytes for algorithms that allow variable key sizes. 
            Currently only applicable to HMAC, where it must be between 16 and 512 bytes.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions.AutoRotatePeriod">
            <summary>
            The period at which this key should be rotated automatically. 
            Setting this to "0" (the default) will disable automatic key rotation. 
            This value cannot be shorter than one hour.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions">
            <summary>
            Represents the Data Key Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions.Base64EncodedContext">
            <summary>
            [required]
             Specifies the base64 encoded context for key derivation. 
             This is required if key derivation is enabled for this key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions.Nonce">
            <summary>
            [optional]
            Specifies the base64 encoded nonce value. 
            This must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. 
            Not required for keys created in 0.6.2+. 
            The value must be exactly 96 bits (12 bytes) long and the user must ensure that for any given context 
            (and thus, any given encryption key) this nonce value is never reused.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions.Bits">
            <summary>
            [optional]
            Specifies the number of bits in the desired key. Can be 128, 256, or 512.
            Defaults to 256.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DataKeyResponse">
            <summary>
            Represents the data key response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyResponse.CipherText">
            <summary>
            Gets or sets the cipher text.
            </summary>
            <value>
            The cipher text.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyResponse.Base64EncodedPlainText">
            <summary>
            Gets or sets the plain text.
            </summary>
            <value>
            The plain text.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem">
            <summary>
            Represents a single Decryption item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem.CipherText">
            <summary>
            [required]
            Specifies cipher text to be decrypted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem.Base64EncodedContext">
            <summary>
            [required]
             Specifies the base64 encoded context for key derivation. 
             This is required if key derivation is enabled for this key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem.Nonce">
            <summary>
            [optional]
            Specifies the base64 encoded nonce value. 
            This must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. 
            Not required for keys created in 0.6.2+. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem.PartialFailureResponseCode">
            <summary>
            Ordinarily, if a batch item fails to encrypt due to a bad input, 
            but other batch items succeed, the HTTP response code is 400 (Bad Request). 
            Some applications may want to treat partial failures differently. 
            Providing the parameter returns the given response code integer instead of 
            a failed status code in this case. If all values fail an error code is still returned. 
            Be warned that some failures (such as failure to decrypt) could be 
            indicative of a security breach and should not be ignored.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DecryptionResponse">
            <summary>
            Represents the decryption response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionResponse.BatchedResults">
            <summary>
            Gets or sets the batch results.
            </summary>
            <value>
            The batch results.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DecryptRequestOptions">
            <summary>
            Represents the Decrypt Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptRequestOptions.BatchedDecryptionItems">
            <summary>
            [optional]
            Specifies a list of items to be decrypted in a single batch. 
            When this parameter is set, if the parameters 'ciphertext', 'context' and 'nonce' are also set, they will be ignored.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem">
            <summary>
            Represents a single Encryption item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.Base64EncodedPlainText">
            <summary>
            [required]
            Specifies base64 encoded plaintext to be encrypted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.Base64EncodedContext">
            <summary>
            [required]
             Specifies the base64 encoded context for key derivation. 
             This is required if key derivation is enabled for this key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.KeyVersion">
            <summary>
            [optional]
             Specifies the version of the key to use for encryption. 
             If not set, uses the latest version. 
             Must be greater than or equal to the key's min_encryption_version, if set.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.Nonce">
            <summary>
            [optional]
            Specifies the base64 encoded nonce value. 
            This must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. 
            Not required for keys created in 0.6.2+. 
            The value must be exactly 96 bits (12 bytes) long and the user must ensure that for any given context 
            (and thus, any given encryption key) this nonce value is never reused.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.KeyType">
            <summary>
            [required/optional]
            This parameter is required when encryption key is expected to be created. 
            When performing an upsert operation, the type of key to create.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.ConvergentEncryption">
            <summary>
            This parameter will only be used when a key is expected to be created. 
            Whether to support convergent encryption. 
            This is only supported when using a key with key derivation enabled and will require all requests to carry both a 
            context and 96-bit (12-byte) nonce. 
            The given nonce will be used in place of a randomly generated nonce. 
            As a result, when the same context and nonce are supplied, the same ciphertext is generated. 
            It is very important when using this mode that you ensure that all nonces are unique for a given context. 
            Failing to do so will severely impact the ciphertext's security.
            </summary>
            <value>
              <c>true</c> if [convergent encryption]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.PartialFailureResponseCode">
            <summary>
            Ordinarily, if a batch item fails to encrypt due to a bad input, 
            but other batch items succeed, the HTTP response code is 400 (Bad Request). 
            Some applications may want to treat partial failures differently. 
            Providing the parameter returns the given response code integer instead of 
            a failed status code in this case. If all values fail an error code is still returned. 
            Be warned that some failures (such as failure to decrypt) could be 
            indicative of a security breach and should not be ignored.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem"/>.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo">
            <summary>
            Details about an encryption key including metadata and encryption algorithm.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.AllowPlaintextBackup">
            <summary>
            If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.AutoRotatePeriod">
            <summary>
            The period at which this key should be rotated automatically. 
            Setting this to "0" (the default) will disable automatic key rotation. 
            This value cannot be shorter than one hour.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.DeletionAllowed">
            <summary>
            Specifies if the key is allowed to be deleted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.Derived">
            <summary>
            If set, key derivation is enabled, all encrypt/decrypt requests to this named key must provide a context which is used for key derivation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.Exportable">
            <summary>
            True if the keys are to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot be disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.ImportedKey">
            <summary>
            If set, indicates that the key is imported.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.Keys">
            <summary>
            The list of key-version pairs in the key ring.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.LatestVersion">
            <summary>
            The latest version of the key ring.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.MinimumAvailableVersion">
            <summary>
            The minimum available version of the key ring.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.MinimumDecryptionVersion">
            <summary>
            Specifies the minimum version of ciphertext allowed to be decrypted. Adjusting this as part
            of a key rotation policy can prevent old copies of ciphertext from being decrypted, should
            they fall into the wrong hands. For signatures, this value controls the minimum version of
            signature that can be verified against. For HMACs, this controls the minimum version of a
            key allowed to be used as the key for verification.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.MinimumEncryptionVersion">
            <summary>
            Specifies the minimum version of the key that can be used to encrypt plaintext, sign payloads, or generate HMACs.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.Name">
            <summary>
            The name of the encryption key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.SupportsEncryption">
            <summary>
            If set, the key can be used in encryption requests.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.SupportsDecryption">
            <summary>
            If set, the key can be used in decryption requests.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.SupportsDerivation">
            <summary>
            If set, the key supports key derivation during encrytion requests.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.SupportsSigning">
            <summary>
            If set, the key can be used in signing requests.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo.Type">
            <summary>
            The type of key (i.e. encryption algorithm) to generate.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.EncryptionResponse">
            <summary>
            Represents the encryption response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionResponse.BatchedResults">
            <summary>
            Gets or sets the batch results.
            </summary>
            <value>
            The batch results.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions">
            <summary>
            Represents the Encrypt Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions.BatchedEncryptionItems">
            <summary>
            [optional]
            Specifies a list of items to be encrypted in a single batch. 
            When this parameter is set, if the parameters 'plaintext', 'context' and 'nonce' are also set, they will be ignored.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.ExportedKeyInfo">
            <summary>
            Details about an exported key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ExportedKeyInfo.Keys">
            <summary>
            The list of key-version pairs in the key ring.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ExportedKeyInfo.Name">
            <summary>
            The name of the key
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ExportedKeyInfo.Type">
            <summary>
            The type of the key
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.HashRequestOptions">
            <summary>
            Represents the options for a request to hash
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HashRequestOptions.Base64EncodedInput">
            <summary>
            Gets or sets the base64 encoded input data to be hashed.
            </summary>
            <value>The base64 encoded input data to be hashed.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HashRequestOptions.Format">
            <summary>
            Gets or sets the output encoding for the response.
            </summary>
            <value>The output encoding for the response.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.HashResponse">
            <summary>
            Represents the response for a request to hash a data string.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HashResponse.HashSum">
            <summary>
            Gets or sets the hash sum using the output encoding specified on the request.
            </summary>
            <value>The hash sum.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:VaultSharp.V1.SecretsEngines.Transit.HmacRequestOptions" -->
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HmacRequestOptions.BatchInput">
            <summary>
            Gets or sets a list of items for processing.  
            If set, then the <see cref="P:VaultSharp.V1.SecretsEngines.Transit.HmacSingleInput.Base64EncodedInput">input</see> parameter will be ignored.
            </summary>
            <value>The list of items for processing.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.HmacSingleInput">
            <summary>
            Represents a single entry to be sent for calculating the HMAC
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HmacSingleInput.KeyVersion">
            <summary>
            Gets or sets the version of the key to use for the operation. Should only be set if an explicit version is required.
            </summary>
            <value>The key version to use for the operation.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HmacSingleInput.Base64EncodedInput">
            <summary>
            Gets or sets the base64 encoded input data to generate an HMAC for.
            </summary>
            <value>The base64 encoded input to generate an HMAC for.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.HmacResponse">
            <summary>
            Represents the response for a request to calculate HMAC.
            </summary>
            <seealso cref="T:VaultSharp.V1.SecretsEngines.Transit.HmacBatchResponse" />
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HmacResponse.BatchResults">
            <summary>
            Gets or sets the list of results if multiple HMACs were requested.
            </summary>
            <value>The list of results.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HmacBatchResponse.Hmac">
            <summary>
            Gets or sets the HMAC value returned by Vault.
            </summary>
            <value>The HMAC value returned by Vault.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.HmacBatchResponse.ErrorResponse">
            <summary>
            Gets or sets the error response from Vault when unable to calculate an HMAC.
            </summary>
            <value>The error response.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions">
            <summary>
            Options used when importing named encryption key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.Base64EncodedCipherText">
            <summary>
            A base64-encoded string that contains two values: 
            an ephemeral 256-bit AES key wrapped using the wrapping key returned by Vault 
            and the encryption of the import key material under the provided AES key. 
            The wrapped AES key should be the first 512 bytes of the ciphertext, 
            and the encrypted key material should be the remaining bytes. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.HashFunction">
            <summary>
            The hash function used for the RSA-OAEP step of creating the ciphertext.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.Type">
            <summary>
            Specifies the type of key to create.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.AllowRotation">
            <summary>
            If set, the imported key can be rotated within Vault by using the rotate endpoint.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.Derived">
            <summary>
            Specifies if key derivation is to be used.If enabled, all encrypt/decrypt requests to this named
            key must provide a context which is used for key derivation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.Base64EncodedKeyDerivationContext">
            <summary>
            A base64-encoded string providing a context for key derivation. 
            Required if derived is set to true.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.Exportable">
            <summary>
            Enables keys to be exportable. This allows for all the valid keys in the key ring to be
            exported. Once set, this cannot be disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.AllowPlaintextBackup">
            <summary>
            If set, enables taking backup of named key in the plaintext format.Once set, this cannot be disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions.AutoRotatePeriod">
            <summary>
            The period at which this key should be rotated automatically. 
            Setting this to "0" (the default) will disable automatic key rotation. 
            This value cannot be shorter than one hour.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.ImportKeyVersionRequestOptions">
            <summary>
            Options used when importing named encryption key into existing key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyVersionRequestOptions.Base64EncodedCipherText">
            <summary>
            A base64-encoded string that contains two values: 
            an ephemeral 256-bit AES key wrapped using the wrapping key returned by Vault 
            and the encryption of the import key material under the provided AES key. 
            The wrapped AES key should be the first 512 bytes of the ciphertext, 
            and the encrypted key material should be the remaining bytes. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.ImportKeyVersionRequestOptions.HashFunction">
            <summary>
            The hash function used for the RSA-OAEP step of creating the ciphertext.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine">
            <summary>
            The Transit Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.CreateEncryptionKeyAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions,System.String)">
            <summary>
            This endpoint creates a new named encryption key of the specified type. 
            The values set here cannot be changed after key creation.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use. This is specified as part of the URL.
            </param>
            <param name="createKeyRequestOptions"></param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.ImportEncryptionKeyAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions,System.String)">
            <summary>
            This endpoint imports existing key material into a new transit-managed encryption key. 
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to create.
            </param>
            <param name="importKeyRequestOptions"></param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.ImportEncryptionKeyVersionAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.ImportKeyVersionRequestOptions,System.String)">
            <summary>
            This endpoint imports new key material into an existing imported key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to create.
            </param>
            <param name="importKeyVersionRequestOptions">The request option</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.ReadWrappingKeyAsync(System.String,System.String)">
            <summary>
            This endpoint is used to retrieve the wrapping key to use for importing keys. 
            The returned key will be a 4096-bit RSA public key.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>        
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The public key</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.ReadEncryptionKeyAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint returns information about a named encryption key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use. This is specified as part of the URL.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The information about the encryption key.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.ReadAllEncryptionKeysAsync(System.String,System.String)">
            <summary>
            Returns a list of keys. Only the key names are returned.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of key names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.DeleteEncryptionKeyAsync(System.String,System.String)">
            <summary>
            This endpoint deletes a named encryption key. It will no longer be possible to decrypt any data encrypted with the named key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use. This is specified as part of the URL.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.UpdateEncryptionKeyConfigAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions,System.String)">
            <summary>
            This endpoint allows tuning configuration values for a given key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use. This is specified as part of the URL.
            </param>
            <param name="updateKeyRequestOptions"><para>[required]</para>
            The options for the request.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.RotateEncryptionKeyAsync(System.String,System.String)">
            <summary>
            This endpoint rotates the version of the named key. After rotation, new plaintext requests will be encrypted with the new version of the key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use. This is specified as part of the URL.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.ExportKeyAsync(VaultSharp.V1.SecretsEngines.Transit.TransitKeyCategory,System.String,System.String,System.String,System.String)">
            <summary>
            This endpoint returns the named key.
            The `keys` object shows the value of the key for each version.
            If version is specified, the specific version will be returned.
            If latest is provided as the version, the current key will be provided.
            Depending on the type of key, different information may be returned.
            The key must be exportable to support this operation and the version must still be valid.
            </summary>
            <param name="keyType"><para>[required]</para>
            Specifies the type of the key to export.
            </param>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to read information about.
            </param>
            <param name="version"><para>[optional]</para>
            Specifies the version of the key to read.
            If omitted, all versions of the key will be returned.
            This is specified as part of the URL.
            If the version is set to latest, the current key will be returned.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.EncryptAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions,System.String,System.String)">
            <summary>
            Encrypts the provided plaintext using the named key.
            This path supports the create and update policy capabilities as follows:
            if the user has the create capability for this endpoint in their policies,
            and the key does not exist, it will be upserted with default values
            (whether the key requires derivation depends on whether the context parameter is empty or not).
            If the user only has update capability and the key does not exist, an error will be returned.
            </summary>
            <param name="keyName">
            [required]
            Specifies the name of the encryption key to encrypt against.
            </param>
            <param name="encryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with cipher text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.DecryptAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.DecryptRequestOptions,System.String,System.String)">
            <summary>
            Decrypts the provided ciphertext using the named key.
            </summary>
            <param name="keyName">
            [required]
            Specifies the name of the encryption key to decrypt against.
            </param>
            <param name="decryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with plain text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.RewrapAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.RewrapRequestOptions,System.String,System.String)">
            <summary>
            This endpoint rewraps the provided ciphertext using the latest version of the named key.
            Because this never returns plaintext, it is possible to delegate this functionality to
            untrusted users or scripts.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use. This is specified as part of the URL.
            </param>vz
            <param name="rewrapRequestOptions"><para>[required]</para>
            The options for the request.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The new cyphertext.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.GenerateDataKeyAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions,System.String,System.String)">
            <summary>
            This endpoint generates a new high-entropy key and the value encrypted with the named key.
            Optionally return the plaintext of the key as well.
            Whether plaintext is returned depends on the path; as a result, you can use Vault ACL policies to control whether a user is allowed to retrieve the plaintext value of a key.
            This is useful if you want an untrusted user or operation to generate keys that are then made available to trusted users.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use to encrypt the datakey.
            </param>
            <param name="dataKeyRequestOptions"></param>
            The Options
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with data key response.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.GenerateRandomBytesAsync(VaultSharp.V1.SecretsEngines.Transit.RandomBytesRequestOptions,System.String,System.String)">
            <summary>
            This endpoint returns high-quality random bytes of the specified length.
            </summary>
            <param name="randomOptions"><para>[required]</para>
            The options for the request.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>A set of random bytes in the requested output format.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.HashDataAsync(VaultSharp.V1.SecretsEngines.Transit.HashRequestOptions,System.String,System.String)">
            <summary>
            This endpoint returns the cryptographic hash of given data using the specified algorithm.
            </summary>
            <param name="hashOptions"><para>[required]</para>
            The options for the request.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The cryptographic hash(es) of the input data.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.GenerateHmacAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.HmacRequestOptions,System.String,System.String)">
            <summary>
            This endpoint returns the digest of given data using the specified hash algorithm 
            and the named key.
            The key can be of any type supported by transit; 
            the raw key will be marshaled into bytes to be used for the HMAC function.
            If the key is of a type that supports rotation, the latest (current) version will be used.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key.</param>
            <param name="hmacOptions"><para>[required]</para>
            The options for the request.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The HMAC digest of the requested data.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.SignDataAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.SignRequestOptions,System.String,System.String)">
            <summary>
            This endpoint returns the cryptographic signature of the given data using the 
            named key and the specified hash algorithm.
            The key must be of a type that supports signing.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to backup.</param>
            <param name="signOptions"><para>[required]</para>
            The options for the request.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The cryptographic signature of the requested data.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.VerifySignedDataAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.VerifyRequestOptions,System.String,System.String)">
            <summary>
            This endpoint returns whether the provided signature is valid for the given data.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to backup.</param>
            <param name="verifyOptions"><para>[required]</para>
            The options for the request.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>If the given signature is valid for the given data.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.BackupKeyAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint returns a plaintext backup of a named key.
            The backup contains all the configuration data and keys of all the versions
            along with the HMAC key.
            The response from this endpoint can be used with the <see cref="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.RestoreKeyAsync(VaultSharp.V1.SecretsEngines.Transit.RestoreKeyRequestOptions,System.String,System.String)">restore</see> endpoint to restore the key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to backup.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The backed up key data for secure storage or a subsequent restore operation.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.RestoreKeyAsync(VaultSharp.V1.SecretsEngines.Transit.RestoreKeyRequestOptions,System.String,System.String)">
            <summary>
            This endpoint restores the backup as a named key.
            This will restore the key configurations and all the versions of the named key
            along with HMAC keys.
            The input to this endpoint should be the output of <see cref="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.BackupKeyAsync(System.String,System.String,System.String)">backup</see> endpoint.
            </summary>
            <remarks>
            For safety, by default the backend will refuse to restore to an existing key.
            If you want to reuse a key name, it is recommended you delete the key before restoring.
            It is a good idea to attempt restoring to a different key name first to verify that the operation successfully completes.
            </remarks>
            <param name="backupData"><para>[required]</para>
            Backed up key data to be restored.</param>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to backup.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.TrimKeyAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.TrimKeyRequestOptions,System.String)">
            <summary>
            This endpoint trims older key versions setting a minimum version
            for the keyring. Once trimmed, previous versions of the key cannot be recovered.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use. This is specified as part of the URL.
            </param>
            <param name="trimKeyRequestOptions">
            The options for the request.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.SetCacheConfigAsync(VaultSharp.V1.SecretsEngines.Transit.CacheConfigRequestOptions,System.String)">
            <summary>
            This endpoint is used to configure the transit engine's cache.
            Note that configuration changes will not be applied until the transit plugin
            is reloaded which can be achieved using the
            <see cref="M:VaultSharp.V1.SystemBackend.Plugin.PluginProvider.ReloadBackendsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">/sys/plugins/reload/backend</see> endpoint.
            </summary>
            <param name="cacheOptions">The options for the request.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>Nothing is returned. No error means the operation was successful.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.ReadCacheConfigAsync(System.String,System.String)">
            <summary>
            This endpoint retrieves configurations for the transit engine's cache.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The current size of the transit engine's cache.</returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.OutputEncodingFormat">
            <summary>
            The output encoding format options for a request.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.OutputEncodingFormat.base64">
            <summary>
            Return the response data in a base64 encoded string format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.OutputEncodingFormat.hex">
            <summary>
            Return the response data in a hexadecimal string format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.PlainTextData">
            <summary>
            Represents the Plain text data.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.PlainTextData.Base64EncodedPlainText">
            <summary>
            Gets or sets the plain text.
            </summary>
            <value>
            The plain text.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.RandomBytesRequestOptions">
            <summary>
            Represents the options for a request for Vault to return a set of random bytes.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.RandomBytesRequestOptions.BytesToGenerate">
            <summary>
            Specifies the number of bytes to return.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.RandomBytesRequestOptions.Format">
            <summary>
            Gets or sets the format to return the bytes in.
            </summary>
            <value>The format to return the bytes in.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.RandomBytesRequestOptions.Source">
            <summary>
            Gets or sets the source of the requested bytes. 
            platform, the default, sources bytes from the platform's entropy source. 
            seal sources from entropy augmentation (enterprise only). 
            all mixes bytes from all available sources.
            </summary>
            <value>The entropy source for random bytes.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.RandomBytesResponse">
            <summary>
            Represents the response for a request to return random bytes.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.RandomBytesResponse.EncodedRandomBytes">
            <summary>
            Gets or sets the random bytes, returned in the format found on the request.
            </summary>
            <value>The encoded random bytes.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.RandomBytesSource">
            <summary>
            The the source of the requested bytes
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.RandomBytesSource.platform">
            <summary>
            platform entropy source
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.RandomBytesSource.seal">
            <summary>
            seal entropy source
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.RandomBytesSource.all">
            <summary>
            mixed entropy source between platform and seal
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.RestoreKeyRequestOptions">
            <summary>
            Represents the data to be sent on restoring an encryption key from backup.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.RestoreKeyRequestOptions.BackupData">
            <summary>
            The backup data for the key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.RestoreKeyRequestOptions.Force">
            <summary>
            Gets or sets a value indicating whether or not the restore operation should proceed and overwrite if a key by the provided name already exists.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.RewrapItem">
            <summary>
            Represents a single item that will be re-wrappred (re-encrypted).
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.RewrapItem.KeyVersion">
            <summary>
            Specifies the version of the key to use for the operation. 
            If not set, uses the latest version.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.RewrapRequestOptions">
            <summary>
            The options set when requesting data re-encryption (rewrap)
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.RewrapRequestOptions.BatchedRewrapItems">
            <summary>
            Specifies a list of items to be decrypted in a single batch.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.SigningResponse">
            <summary>
            Represents the response returned by Vault on a request to sign a data string.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SigningResponse.BatchResults">
            <summary>
            Gets or sets a list of results if multiple signatures were requested at once.
            </summary>
            <value>The list of results.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SigningBatchResponse.Error">
            <summary>
            Gets or sets the error message returned if unable to sign the input data string.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SigningBatchResponse.PublicKey">
            <summary>
            Gets or sets the derived public key used for the signature, if requested.
            </summary>
            <value>The derived public key.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SigningBatchResponse.Signature">
            <summary>
            Gets or sets the signature for the input data string.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.SignRequestOptions">
            <summary>
            Represents the options for a request to Vault to perform a 
            cryptographic signature on an input data string.
            </summary>
            <seealso cref="T:VaultSharp.V1.SecretsEngines.Transit.SignSingleInput" />
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SignRequestOptions.BatchInput">
            <summary>
            Gets or sets the list of input data to calculate signatures for.
            </summary>
            <value>The list of input data.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.SignSingleInput">
            <summary>
            Represents a single data value to be signed.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SignSingleInput.KeyVersion">
            <summary>
            Gets or sets the version of the key to use for the operation. Should only be set if an explicit version is required.
            </summary>
            <value>The key version to use for the operation.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SignSingleInput.Base64EncodedInput">
            <summary>
            Gets or sets the base64 encoded input data to be signed.
            </summary>
            <value>The base64 encoded input.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SignSingleInput.Base64EncodedKeyDerivationContext">
            <summary>
            Gets or sets the base64 encoded key derivation context, for use with ECDSA keys only.
            </summary>
            <value>The base64 encoded key derivation context.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SignSingleInput.PreHashed">
            <summary>
            Gets or sets a value that should be set to <c>true</c> if the input is already hashed.
            </summary>
            <value><c>true</c> if prehashed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SignSingleInput.SignatureAlgorithm">
            <summary>
            When using an RSA key, specifies which RSA signature algorithm to use for signing.
            </summary>
            <value>The signature algorithm to use for signing.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.SignSingleInput.MarshalingAlgorithm">
            <summary>
            When using an ECDSA key, specifies the way in which the signature should be marshaled.
            </summary>
            <value>The marshaling algorithm.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.SignatureAlgorithm">
            <summary>
            The RSA signature algorithm to use for signing, if applicable.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.MarshalingAlgorithm">
            <summary>
            The way in which the signature should be marshaled, if applicable.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.TransitHashAlgorithm">
            <summary>
            The set of hash algorithms that are currently supported by Vault.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.TransitHashFunction">
            <summary>
            The set of hash functions that are currently supported by Vault.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.TransitKeyCategory">
            <summary>
            Represents the type of key category.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType">
            <summary>
            Represents the type of Transit key to be generated.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.aes256_gcm96">
            <summary>
            AES-256 wrapped with GCM using a 96-bit nonce size AEAD (symmetric, supports derivation and convergent encryption, default)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.ecdsa_p256">
            <summary>
            ECDSA using the P-256 elliptic curve (asymmetric)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.aes128_gcm96">
            <summary>
            AES-128 wrapped with GCM using a 96-bit nonce size AEAD (symmetric, supports derivation and convergent encryption)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.chacha20_poly1305">
            <summary>
            ChaCha20-Poly1305 AEAD (symmetric, supports derivation and convergent encryption)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.ed25519">
            <summary>
            ED25519 (asymmetric, supports derivation). When using derivation, a sign operation with the
            same context will derive the same key and signature; this is a signing analogue to
            convergent_encryption.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.ecdsa_p384">
            <summary>
            ECDSA using the P-384 elliptic curve (asymmetric)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.ecdsa_p521">
            <summary>
            ECDSA using the P-521 elliptic curve (asymmetric)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.rsa_2048">
            <summary>
            RSA with bit size of 2048 (asymmetric)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.rsa_3072">
            <summary>
            RSA with bit size of 3072 (asymmetric)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.rsa_4096">
            <summary>
            RSA with bit size of 4096 (asymmetric)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.hmac">
            <summary>
            HMAC (HMAC generation, verification)
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.TrimKeyRequestOptions">
            <summary>
            Represents the options that will be used to trim the key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.TrimKeyRequestOptions.MinimumAvailableVersion">
            <summary>
            Specifies the minimum_available_version.The minimum available 
            version for the key ring. All versions before this version will be
            permanently deleted. This value can at most be equal to the lesser 
            of min_decryption_version and min_encryption_version.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions">
            <summary>
            Represents that options that will be updated on the encryption key. Only the options
            set are sent on the request. Unset field will not be serialized on the request payload.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions.DeletionAllowed">
            <summary>
            Specifies if the key is allowed to be deleted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions.Exportable">
            <summary>
            Enables keys to be exportable. This allows for all the valid keys in the key ring to be
            exported. Once set, this cannot be disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions.AllowPlaintextBackup">
            <summary>
            Enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions.MinimumDecryptionVersion">
            <summary>
            Specifies the minimum version of ciphertext allowed to be decrypted. Adjusting this as part
            of a key rotation policy can prevent old copies of ciphertext from being decrypted, should 
            they fall into the wrong hands. For signatures, this value controls the minimum version of
            signature that can be verified against. For HMACs, this controls the minimum version of a
            key allowed to be used as the key for verification.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions.MinimumEncryptionVersion">
            <summary>
            Specifies the minimum version of the key that can be used to encrypt plaintext, sign payloads,
            or generate HMACs. Must be 0 (which will use the latest version) or a value greater or equal
            to min_decryption_version.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions.AutoRotatePeriod">
            <summary>
            The period at which this key should be rotated automatically. 
            Setting this to "0" (the default) will disable automatic key rotation. 
            This value cannot be shorter than one hour.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.VerifyRequestOptions">
            <summary>
            Represents the options for a request to Vault to validate either an HMAC or a signature.
            </summary>
            <seealso cref="T:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput" />
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifyRequestOptions.BatchInput">
            <summary>
            Gets or sets the list of input data to verify signatures or HMACs for.
            </summary>
            <value>The list of input data.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput">
            <summary>
            Represents a single data value (HMAC or signature) to be verified.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput.Base64EncodedInput">
            <summary>
            Gets or sets the base64 encoded input data to have its signature verified.
            </summary>
            <value>The base64 encoded input.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput.Signature">
            <summary>
            Gets or sets the signature to verify.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput.Hmac">
            <summary>
            Gets or sets the HMAC to verify.
            </summary>
            <value>The HMAC.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput.Base64EncodedKeyDerivationContext">
            <summary>
            Gets or sets the base64 encoded key derivation context, for use with ECDSA keys only.
            </summary>
            <value>The base64 encoded key derivation context.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput.PreHashed">
            <summary>
            Gets or sets a value that should be set to <c>true</c> if the input is already hashed.
            </summary>
            <value><c>true</c> if prehashed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput.SignatureAlgorithm">
            <summary>
            When using an RSA key, specifies which RSA signature algorithm to use for signature verification.
            </summary>
            <value>The signature algorithm to use for signing.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput.MarshalingAlgorithm">
            <summary>
            When using an ECDSA key, specifies the way in which the signature should be unmarshaled.
            </summary>
            <value>The marshaling algorithm.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.VerifyResponse">
            <summary>
            Represents the data returned by Vault on a request to verify a signature or HMAC.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifyResponse.BatchResults">
            <summary>
            Gets or sets a list of results if multiple verifications were requested at once.
            </summary>
            <value>The list of results.</value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.VerifySingleResponse.Valid">
            <summary>
            Gets or sets a value indicating the verification result.
            </summary>
            <value><c>true</c> if the valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials">
            <summary>
            Represents credentials with a username and password.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AbstractAuditBackend">
            <summary>
            Represents an audit backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.MountPoint">
            <summary>
            Gets or sets the mount point. If not set, the value will default to the <see cref="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.Type"/> value.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.Type">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.Description">
            <summary>
            <para>[optional]</para>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.Local">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag indicating if this is a local mount.
            </summary>
            <remarks>
            The option is allowed in Vault open-source, but relevant functionality is only supported in Vault Enterprise:
            </remarks>
            <value>
            The flag.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions">
            <summary>
            Represents the base class for audit backend options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.Format">
            <summary>
            Gets or sets the format.
            Allows selecting the output format. 
            Valid values are json (the default) and jsonx, which formats the normal log entries as XML.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.HmacAccessor">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [hmac accessor].
            A boolean, if set, enables the hashing of token accessor. 
            Defaults to true. 
            This option is useful only when <see cref="P:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.LogSensitiveDataInRawFormat"/> is false.
            </summary>
            <value>
              <c>true</c> if [hmac accessor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.LogSensitiveDataInRawFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [log sensitive data in raw format].
            Defaults to <value>"false"</value>.
            </summary>
            <value>
            <c>true</c> if [log sensitive data in raw format]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AbstractPolicyBase">
            <summary>
            Represents an abstract Vault Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractPolicyBase.Name">
            <summary>
            Gets or sets the name of the policy.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.ACLPolicy">
            <summary>
            Represents a Vault ACL Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.ACLPolicy.Policy">
            <summary>
            Gets or sets the policy document. 
            This can be base64-encoded to avoid string escaping.
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AuditBackendJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SystemBackend.AbstractAuditBackend" /> object from JSON.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AuditBackendType">
            <summary>
            A helper class for retrieving and comparing Audit Backend types.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SystemBackend.AuditBackendType._value">
            <summary>
            The _type
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditBackendType.File">
            <summary>
            Gets the file.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditBackendType.Syslog">
            <summary>
            Gets the syslog.
            </summary>
            <value>
            The syslog.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditBackendType.Value">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.AuditBackendType"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.op_Equality(VaultSharp.V1.SystemBackend.AuditBackendType,VaultSharp.V1.SystemBackend.AuditBackendType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.op_Inequality(VaultSharp.V1.SystemBackend.AuditBackendType,VaultSharp.V1.SystemBackend.AuditBackendType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.Equals(VaultSharp.V1.SystemBackend.AuditBackendType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AuditBackendTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SystemBackend.AuditBackendType" /> object to and from JSON.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AuditHash">
            <summary>
            Represents the Audit hash.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditHash.Hash">
            <summary>
            Gets or sets a the hash.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.CORSConfig">
            <summary>
            CORS configuration.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CORSConfig.Enabled">
            <summary>
            Gets or sets a flag denoting if CORS is enabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CORSConfig.AllowedOrigins">
            <summary>
            Gets or sets the allowed origins. 
            Use of wildcard '*' is allowed.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CORSConfig.AllowedHeaders">
            <summary>
            Gets or sets the strings specifying headers that are permitted to be on cross-origin requests. 
            Headers set via this parameter will be appended to the list of headers that Vault allows by default.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.CustomAuditBackend">
            <summary>
            Represents a custom <see cref="T:VaultSharp.V1.SystemBackend.AuditBackendType"/> based audit backend.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.CustomAuditBackend.#ctor(VaultSharp.V1.SystemBackend.AuditBackendType)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.CustomAuditBackend"/> class.
            </summary>
            <param name="auditBackendType">Type of the audit backend.</param>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CustomAuditBackend.Options">
            <summary>
            <para>[optional]</para>
            Gets or sets the generic options. Use any key/value pairs suitable for the custom audit backend.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CustomAuditBackend.Type">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.EncryptionKeyStatus">
            <summary>
            Represents information about the encryption key used by Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.EncryptionKeyStatus.InstallTime">
            <summary>
            Gets or sets the install time for the key.
            </summary>
            <value>
            The install time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.EncryptionKeyStatus.SequentialKeyNumber">
            <summary>
            Gets or sets the sequential key number.
            </summary>
            <value>
            The sequential key number.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.AbstractGPPolicyBase">
            <summary>
            Represents a Vault GP Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.AbstractGPPolicyBase.Policy">
            <summary>
            Gets or sets the policy document. 
            This can be base64-encoded to avoid string escaping.
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.AbstractGPPolicyBase.EnforcementLevel">
            <summary>
            Gets or sets the enforcement level to use. 
            This must be one of advisory, soft-mandatory, or hard-mandatory.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroup.MaxTimeToLive">
            <summary>
            Gets or sets the maximum ttl for a control group wrapping token. 
            This can be in seconds or duration 
            </summary>
            <value>
            The max ttl.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestAuthorization">
            <summary>
            Authorization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestAuthorization.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestAuthorization.EntityName">
            <summary>
            Gets or sets the entity name.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestEntity">
            <summary>
            The requesting entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestEntity.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestEntity.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus">
            <summary>
            Control group status
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus.Approved">
            <summary>
            Gets or sets the approval status.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus.RequestPath">
            <summary>
            Gets or sets the request path.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus.RequestEntity">
            <summary>
            Gets or sets the requesting entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus.Authorizations">
            <summary>
            Gets or sets the authorizations.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.EGPPolicy">
            <summary>
            Represents a Vault EGP Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EGPPolicy.Paths">
            <summary>
            Gets or sets the paths.
            </summary>
            <value>
            The paths.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel">
            <summary>
            The EnforcementLevel class.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel._value">
            <summary>
            The _type
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.Advisory">
            <summary>
            Gets the Advisory level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.SoftMandatory">
            <summary>
            Gets the SoftMandatory level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.HardMandatory">
            <summary>
            Gets the HardMandatory level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.Value">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.op_Equality(VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel,VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.op_Inequality(VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel,VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.Equals(VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevelJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel" /> object to and from JSON.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider">
            <summary>
            Enterprise System backend APIs
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise">
            <summary>
            Enterprise System backend APIs
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetControlGroupConfigAsync">
            <summary>
            Gets the current Control Group configuration.
            </summary>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <returns>Config</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.ConfigureControlGroupAsync(System.String)">
            <summary>
            Configures control groups.
            </summary>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <param name="maxTimeToLive">The maximum ttl for a control group wrapping token. This can be provided in seconds or duration (2h).</param>
            <returns>Task</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.DeleteControlGroupConfigAsync">
            <summary>
            Removes any control group configuration.
            </summary>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.AuthorizeControlGroupAsync(System.String)">
            <summary>
            Authorizes a control group request.
            </summary>
            <param name="accessor"><para>[required]</para>
            The accessor for the control group wrapping token.</param>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <returns>Authorization.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.CheckControlGroupStatusAsync(System.String)">
            <summary>
            Checks the status of a control group request.
            </summary>
            <param name="accessor"><para>[required]</para>
            The accessor for the control group wrapping token.</param>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <returns>The status.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetLicenseAsync">
            <summary>
            Returns information about the currently installed license.
            </summary>
            <returns>License.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.InstallLicenseAsync(System.String)">
            <summary>
            Used to install a license into Vault.
            </summary>
            <param name="licenceText"><para>[required]</para>
            The license text.
            </param>
            <returns>Task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetRGPPoliciesAsync">
            <summary>
            Gets all the RGP policy names in the system.
            </summary>
            <returns>
            The policy names.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetRGPPolicyAsync(System.String)">
            <summary>
            Gets the rules for the named RGP policy.
            </summary>
            <param name="policyName">
            <para>[required]</para>
            The name of the policy.</param>
            <returns>
            The rules for the policy.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.WriteRGPPolicyAsync(VaultSharp.V1.SystemBackend.Enterprise.RGPPolicy)">
            <summary>
            Adds or updates the RGP policy.
            Once a policy is updated, it takes effect immediately to all associated users.
            </summary>
            <param name="policy"><para>[required]</para>
            The policy to be added or updated.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.DeleteRGPPolicyAsync(System.String)">
            <summary>
            Deletes the named RGP policy. This will immediately affect all associated users.
            </summary>
            <param name="policyName"><para>[required]</para>
            The name of the policy.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetEGPPoliciesAsync">
            <summary>
            Gets all the EGP policy names in the system.
            </summary>
            <returns>
            The policy names.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetEGPPolicyAsync(System.String)">
            <summary>
            Gets the rules for the named EGP policy.
            </summary>
            <param name="policyName">
            <para>[required]</para>
            The name of the policy.</param>
            <returns>
            The rules for the policy.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.WriteEGPPolicyAsync(VaultSharp.V1.SystemBackend.Enterprise.EGPPolicy)">
            <summary>
            Adds or updates the EGP policy.
            Once a policy is updated, it takes effect immediately to all associated users.
            </summary>
            <param name="policy"><para>[required]</para>
            The policy to be added or updated.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.DeleteEGPPolicyAsync(System.String)">
            <summary>
            Deletes the named EGP policy. This will immediately affect all associated users.
            </summary>
            <param name="policyName"><para>[required]</para>
            The name of the policy.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.License">
            <summary>
            License information.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.License.ExpirationTime">
            <summary>
            Gets or sets the license expiration time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.License.Features">
            <summary>
            Gets or sets the features.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.License.LicenseId">
            <summary>
            Gets or sets the license id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.License.StartTime">
            <summary>
            Gets or sets the license start time.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.RGPPolicy">
            <summary>
            Represents a Vault RGP Policy entity.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.FileAuditBackend">
            <summary>
            Represents the <see cref="P:VaultSharp.V1.SystemBackend.AuditBackendType.File"/> based audit backend.
            This audit backend writes audit logs to a file.
            This is a very simple audit backend: it appends logs to a file.
            It does not currently assist with any log rotation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.FileAuditBackend.Type">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.FileAuditBackend.Options">
            <summary>
            <para>[optional]</para>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.FileAuditBackend.Path">
            <summary>
            <para>[optional]</para>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.FileAuditBackendOptions">
            <summary>
            Represents the options for the <see cref="T:VaultSharp.V1.SystemBackend.FileAuditBackend"/>.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.FileAuditBackendOptions.FilePath">
            <summary>
            <para>[required]</para>
            Gets or sets the path to where the file will be written. 
            If this path exists, the audit backend will append to it.
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.HealthStatus">
            <summary>
            Represents the health status of a Vault instance.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.Initialized">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is initialized.
            </summary>
            <value>
              <c>true</c> if initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.Sealed">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is sealed.
            </summary>
            <value>
              <c>true</c> if sealed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.Standby">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is a standby.
            </summary>
            <value>
              <c>true</c> if standby; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.PerformanceStandby">
            <summary>
            Gets or sets the performance standby.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ReplicationPerformanceMode">
            <summary>
            Gets or sets the replication performance mode.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ReplicationDisasterRecoverymode">
            <summary>
            Gets or sets the replication dr mode.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ServerTimeUtcUnixTimestamp">
            <summary>
            Gets or sets the server time UTC unix timestamp.
            </summary>
            <value>
            The server time UTC unix timestamp.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ClusterName">
            <summary>
            Gets or sets the name of the cluster.
            </summary>
            <value>
            The name of the cluster.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ClusterId">
            <summary>
            Gets or sets the cluster identifier.
            </summary>
            <value>
            The cluster identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ServerTimeUtc">
            <summary>
            Gets the friendly server time from ServerTimeUtcUnixTimestamp 
            which is in seconds since January 1, 1970 12:00:00 a.m. UTC.
            </summary>
            <value>
            The server time in UTC. (zero offset)
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.HttpStatusCode">
            <summary>
            Gets or sets the code.
            </summary>
            <value>
            The code.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.InitOptions">
            <summary>
            Represents the initialization options for Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.PgpKeys">
            <summary>
            <para>[required]</para>
            Gets or sets the PGP keys.
            An array of PGP public keys used to encrypt the output unseal keys. 
            Ordering is preserved. The keys must be base64-encoded from their original binary representation. 
            The size of this array must be the same as <see cref="P:VaultSharp.V1.SystemBackend.InitOptions.SecretShares"/>.
            </summary>
            <value>
            The PGP keys.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.RootTokenPgpKey">
            <summary>
            <para>[optional]</para>
            Gets or sets a PGP public key used to encrypt the initial root token. 
            The key must be base64-encoded from its original binary representation.
            </summary>
            <value>
            The root token pgp key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.SecretShares">
            <summary>
            <para>[required]</para>
            Gets or sets the number of shares to split the master key into.
            </summary>
            <value>
            The secret shares.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.SecretThreshold">
            <summary>
            <para>[required]</para>
            Gets or sets the secret threshold.
            The number of shares required to reconstruct the master key. 
            This must be less than or equal to <see cref="P:VaultSharp.V1.SystemBackend.InitOpt